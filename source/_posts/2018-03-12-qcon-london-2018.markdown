---
layout: post
title: "QCon London 2018"
date: 2018-03-12 13:08:46 -0700
comments: true
categories: 
- Talk
---

Last week I had a chance to attend and speak at my first QCon conference: QCon London 2018. QCon has been an example of an extraordinary tech conference for me - great organization, amazing lineup, great tracks covering bleeding-edge tech, as well as various best practices around distributed systems. Also, they managed to get a decent vegetarian food right üòâ

Keep reading if you're curious about the best talks I attended and my speaking experience.

<!-- more -->

## Best Talks I Attended

### Day 1: Stream Processing in the Modern Age

I spent my first day at the `Stream Processing in the Modern Age` track hosted by Tyler Akidau. 

**[Drivetribe: A Social Network on Streams](https://qconlondon.com/london2018/presentation/drivetribe-social-network-streams)**

[Presentation](https://www.infoq.com/presentations/drivetribe)

Drivetribe is a popular motoring social network. Instead of relying on a classic 3-tier architecture or embracing microservices they decided to do something different. Drivetribe uses stream processing for generating all relevant content in write time. So, when you open a page everything was already precalculated before, including the number of likes and comments. How? They heavily rely on write time aggregation. Here's the high-level diagram of the system:

{% img /images/posts/qcon-2018/qcon-2018-4.png 900 %}

Drivetribe also employs various algebras to deal with duplicate and out of order events:

-  [Semigroup](https://en.wikipedia.org/wiki/Semigroup)/[Monoid](https://en.wikipedia.org/wiki/Monoid) for adding events
-  [Band](https://en.wikipedia.org/wiki/Band_(mathematics\)) for duplicated events
-  [Semilattice](https://en.wikipedia.org/wiki/Semilattice) for out of order and duplicated events

**[Next Steps in Stateful Streaming with Apache Flink](https://qconlondon.com/london2018/presentation/next-steps-stateful-streaming-apache-flink)**

[Presentation](https://www.infoq.com/presentations/flink-stateful-streaming)

Stephan Ewen talked about the stateful operations in Apache Flink and whether it's possible to combine Batch and Streaming APIs in one processor. Recommended for anyone who uses Apache Flink in production.

**[Streaming SQL Foundations: Why I ‚ù§ Streams+Tables](https://qconlondon.com/london2018/presentation/streaming-sql-foundations-why-i-%E2%9D%A4-streamstables)**

[Presentation](https://www.infoq.com/presentations/sql-streaming)

Tyler Akidau did really great job explaining the Stream/Table duality, something that Kafka Streams implements as a first-class citizen. 

He also showed us how (and why) you can extend SQL to support streaming.

### Day 2: Architectures You've Always Wondered About

I spent most of my second day at the `Architectures You've Always Wondered About` track hosted by Wesley Reisz.

**[Inside a Self-Driving Uber](https://qconlondon.com/london2018/presentation/inside-self-driving-uber)**

[Presentation](https://www.infoq.com/presentations/uber-self-drive)

It seems like everybody wanted to attend this talk üòâ And it was definitely worth it! We learned a lot about the navigation systems, all kinds of sensors and various use-cases for Machine Learning: perception, prediction and planning. 

{% img /images/posts/qcon-2018/qcon-2018-5.png 900 %}

Testing self-driving cars is a tricky topic as well. We discovered pros and cons of offline testing via simulation as well as online testing with real vehicles. 

**[Logistics as a Service: Building the Ocado Smart Platform](https://qconlondon.com/london2018/presentation/logistics-service-building-ocado-smart-platform)**

[Presentation](https://www.infoq.com/presentations/ocado)

This presentation consisted from two parts. In the first part Paul Sweetman described how and why Ocado uses multiple clouds (AWS and GCP). The second part by Alex Harvey was really mind-blowing! Check this [short video](http://www.bbc.com/news/av/business-38897417/the-ocado-warehouse-run-by-robots), looks impressive, doesn't it? Alex actually talks about the infrastructure they use to power all that automation and robots. Great talk.

**[Lambda Architectures: a Snapshot, a Stream, & a Bunch of Deltas](https://qconlondon.com/london2018/presentation/lambda-architectures-snapshot-stream-bunch-deltas)**

[Presentation](https://www.infoq.com/presentations/lambda-streams-delta)

I was really surprised to see another application built on top of stream processing. Lots of really interesting details about Hudson's Bay microservices setup with Lambda Architecture, caching pros & cons, Apache Kafka usage and more. Very practical and quite entertaining.

### Day 3: a bit of everything

Third day was the most diverse in terms of tracks I decided to attend.

**[High Performance Actors](https://qconlondon.com/london2018/presentation/high-performance-actors)**

[Slides](https://qconlondon.com/system/files/presentation-slides/high-performance-akka.pdf) | Video (not yet available)

Probably one of the best introductions to actor systems and Akka (Java API) I've seen! Focused on real-world performance and reasoning behind some of the Akka design decisions.

**[Cloud-Native and Scalable Kafka Architecture](https://qconlondon.com/london2018/presentation/cloud-native-and-scalable-kafka-architecture)**

[Presentation](https://www.infoq.com/presentations/cloud-native-kafka-netflix)

This is a true gem of the conference for me, because, well, I deal with Apache Kafka clusters a lot. Netflix has the same problems with scaling Kafka clusters quickly up and down. Adding an extra broker to the existing cluster is not fast and a proper rebalancing can take days. 

They solved the problem by scaling the number of clusters, not the number of brokers. With proper automation and custom producers they're able to quickly add extra capacity by creating additional clusters when needed. Producers know how to deal with it and as a bonus they also know how to failover quickly when necessary.

{% img /images/posts/qcon-2018/qcon-2018-6.png 900 %}

Netflix also uses Kafka ACL and quotas for proper multi-tenancy. 

**[Tasty Topics](https://qconlondon.com/london2018/presentation/tasty-topics)**

[Slides](https://qconlondon.com/system/files/presentation-slides/qconlon18-tastytopics.pdf)

Great talk by Michael Hussey (for some reason there were just a few attendees, but I loved it!). He talked about various general use-cases for Pub/Sub systems like using different messaging topics for migrating data formats, monitoring, IoT and even geo-location!

**[Cluster Consensus: When Aeron Met Raft](https://qconlondon.com/london2018/presentation/cluster-consensus-when-aeron-met-raft)**

[Slides](https://qconlondon.com/system/files/presentation-slides/clusterconsensus-aeron-raft.pdf) | Video (not yet available)

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Another excellent talk by <a href="https://twitter.com/mjpt777?ref_src=twsrc%5Etfw">@mjpt777</a> at <a href="https://twitter.com/hashtag/QConLondon?src=hash&amp;ref_src=twsrc%5Etfw">#QConLondon</a> <a href="https://t.co/ThfbkD3gVP">pic.twitter.com/ThfbkD3gVP</a></p>&mdash; Yaroslav Tkachenko (@sap1ens) <a href="https://twitter.com/sap1ens/status/971425183553785859?ref_src=twsrc%5Etfw">March 7, 2018</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

Martin Thompson is a well-known high-performance expert and, apparently, he's aware of every computer science paper related to performance, concurrency or messaging for the last few decades üòâ

He talked about [Aeron](https://github.com/real-logic/aeron), which is a high-performance message transport. He covered the way Aaron uses Raft for clustering and shared some of the Java NIO pain.

## My Talks

### Presentation

{% img /images/posts/qcon-2018/qcon-2018-1.jpg 900 %}

I had a chance to talk about the two of my most favourite topics (aside from the data pipelines) at the same time: actors and event-driven systems. You can find an article about my `Actors or Not: Async Event Architectures` presentation [here](https://www.infoq.com/news/2018/03/asynchronous-event-architectures), video [here](https://www.infoq.com/presentations/async-event-arch) and the slides below:

<iframe src="//www.slideshare.net/slideshow/embed_code/key/zSt0T8CldF2BK" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>

In this presentation I talk about two different event-driven [micro]service environments: "classic" Pub/Sub in Python that we've been building at Demonware and actor-based messaging on top of message queue with some routing that we've designed and built at Bench Accounting a few years ago.

My talk hasn't received very high ratings (¬Ø\\_(„ÉÑ)_/¬Ø), but I've got A LOT of questions after, which always feels good - people seem to be interested in learning best practices and adopting event-driven architecture more widely nowadays. 

Here's the interesting part though: apparently, my talk is #3 Best Attended talk during the conference! 

{% img /images/posts/qcon-2018/qcon-2018-2.png 900 %}

### AMA: Actor-Based Architectures 

I also had an honour to host an AMA session (Ask-Me-Anything) together with Jonas Boner and Kiki Carter. 

I counted only ~10 people in total, but it was amazing to see people like Martin Thompson and Dave Farley among our guests.

{% img /images/posts/qcon-2018/qcon-2018-3.jpg 900 %}

We discussed a lot of concerns and challenges related to the Actor systems. And I didn't notice how 50 minutes just flew by.

## Summary

QCon has 12 years of experience organizing top notch tech conferences and you can clearly see it in every detail. That + one of the best experts in the industry is a simple recipe for success. I'm looking forward to my next QCon!

<iframe src="https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2FQCon%2Fvideos%2F10155839622601971%2F&width=500&show_text=false&appId=160545830691077&height=280" width="500" height="280" style="border:none;overflow:hidden" scrolling="no" frameborder="0" allowTransparency="true" allowFullScreen="true"></iframe>
