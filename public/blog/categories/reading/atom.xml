<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Reading | sap1ens blog]]></title>
  <link href="http://sap1ens.com/blog/categories/reading/atom.xml" rel="self"/>
  <link href="http://sap1ens.com/"/>
  <updated>2016-07-17T19:51:56-07:00</updated>
  <id>http://sap1ens.com/</id>
  <author>
    <name><![CDATA[Yaroslav Tkachenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Two absolute must read books for software engineers]]></title>
    <link href="http://sap1ens.com/blog/2015/12/27/two-absolute-must-read-books-for-software-engineers/"/>
    <updated>2015-12-27T17:18:06-08:00</updated>
    <id>http://sap1ens.com/blog/2015/12/27/two-absolute-must-read-books-for-software-engineers</id>
    <content type="html"><![CDATA[<p>Nowadays you can find lots of “must-read” lists about software engineering in general, as well as specific topic or language. All these years I had an impression that some parts are missing from the big picture, especially for the beginners. Yes, it’s important to know your current language of choice in depth, or be an expert in some tool or technology. But you probably also feel that some common knowledge exists, that is between “Hello World” / MVC tutorials and books covering specific topics. I was lucky to find one of such books a while ago and recently I have found another one.</p>

<!-- more -->


<p><img src="/images/posts/implementation-patterns.jpg" width="300"></p>

<p><a href="http://amzn.com/0321413091">Implementation Patterns by Kent Beck</a></p>

<p>I was introduced to Implementation Patterns a couple of years ago by my colleague Pavel. It’s an amazing collection of “how-to”s and recipes covering our day-to-day software design activities, but not on a high system level, instead it’s focused on a design of your classes / modules, clear naming and refactoring. It’s also very OOP-focused, but lots of principles are similar and can be used in FP.</p>

<p><img src="/images/posts/iddd.jpg" width="300"></p>

<p><a href="http://amzn.com/0321834577">Implementing Domain-Driven Design by Vaughn Vernon</a></p>

<p>iDDD book is my recent finding. I’m still reading it, but I can already say that it’s something I’ve been looking for a very long time. I have huge problems with bootstrapping new engineers without real enterprise experience (read: experience with big and complicated domain-specific systems). It’s so challenging to explain SOA and DDD principles, because expertise in those areas can be very limited and knowledge is subtle. Also it has nice introduction to Event Sourcing and Eventual consistency.</p>

<p>From now on I’m going to recommend these books to every single new hire or beginner who needs an advice. Go and read them if you haven’t ;&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How and what I read [as a Software Engineer]]]></title>
    <link href="http://sap1ens.com/blog/2014/10/13/how-and-what-i-read-as-a-software-engineer/"/>
    <updated>2014-10-13T15:06:09-07:00</updated>
    <id>http://sap1ens.com/blog/2014/10/13/how-and-what-i-read-as-a-software-engineer</id>
    <content type="html"><![CDATA[<p>I think that self-education is the most important aspect of a good Software Engineer. You <em>have to</em> learn a lot, because our field is still very changeable: popular technology that you know right now might be forgotten very soon, in 2-3 years. And even if you spend significant amount of time during you work day it&rsquo;s not enough :) Always not enough. I&rsquo;m not saying that you should learn <em>everything</em>, but mastering even 2-3 skills that you have and care for is very challenging.</p>

<p>And with self-education I don&rsquo;t necessary mean visiting some expensive courses or getting additional certificate. Not at all. For me, reading books, articles and tutorials is always more efficient &ndash; you can choose very granular pieces of wisdom that can help you fill the gaps in your knowledge.</p>

<!-- more -->


<p>Thankfully, there are a lot of ways to increase your reading list: social networks, blogs, email subscriptions, feed aggregators&hellip; Even old-school books can be accessed online with different devices. I want to share what I use to manage all these things.</p>

<p>And before I start I just want to mention that I usually use iPad Air for reading and I think it&rsquo;s a best device for that ;)</p>

<h2>Books and everything else</h2>

<p>I think it&rsquo;s good to separate books (and long research papers, tutorials, etc.) from relatively short articles and blog posts. In this case you can read one book at the time (for example spend 30 minutes during the evening every day) and also consume articles on the fly (when you&rsquo;re going to work, having lunch, taking a break, etc).</p>

<p>I use <a href="https://www.omnigroup.com/omnifocus">OmniFocus</a> for all kinds of ToDo lists. And I have a separate list for books to read. Usually I read them with <a href="https://itunes.apple.com/ca/app/ibooks/id364709193">iBooks</a> or <a href="https://itunes.apple.com/ca/app/kindle/id302584613">Kindle for iPad</a>.</p>

<p>Let&rsquo;s see how to deal with smaller things.</p>

<h3>RSS</h3>

<p><a href="http://www.newsblur.com">NewsBlur</a> is my Google Reader replacement. Right now I have 48 subscriptions, mostly technical blogs like <a href="http://highscalability.com">highscalability.com</a>, <a href="http://letitcrash.com">letitcrash.com</a> or  <a href="http://martinfowler.com">martinfowler.com</a>.</p>

<h3>Pocket</h3>

<p><a href="https://getpocket.com">Pocket</a> is my main reading list. Before I&rsquo;ve tried <a href="https://www.readability.com">Readability</a>, which is free, but Pocket has much better iOS app. And also it can save videos!</p>

<h2>Things in action</h2>

<p>So, I have different streams of incoming information &ndash; Twitter, NewsBlur, reddit and reddit-like websites, conversations with colleagues, meetups, etc. Something I read right away, but most of the articles go to the Pocket app. It&rsquo;s important to give every article a few tags, so you can easily filter and choose what you want to read later. And with books I spent a few minutes to check reviews and content before adding them to the reading list.</p>

<p>I don&rsquo;t use recommendation-based apps like Flipboard or Prismatic, because my reading lists are never empty :) And also, I&rsquo;ll know about all really important and popular articles anyway, for example from Twitter.</p>

<h2>Choice</h2>

<p>It&rsquo;s so easy to sink into this flow of articles, blog posts, updates&hellip; I&rsquo;m trying to plan what I&rsquo;m going to learn and save things accordingly. For example, I have plans to learn more Haskell, so if I see really good article about some Haskell concept or library, I save it. But if it&rsquo;s Go, Rust or how Lift framework works &ndash; I don&rsquo;t have interest now (and in the near future), so I just skip them. You should be realistic and honest to yourself.</p>
]]></content>
  </entry>
  
</feed>
