<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Spray | sap1ens blog]]></title>
  <link href="http://sap1ens.com/blog/categories/spray/atom.xml" rel="self"/>
  <link href="http://sap1ens.com/"/>
  <updated>2016-07-17T19:51:56-07:00</updated>
  <id>http://sap1ens.com/</id>
  <author>
    <name><![CDATA[Yaroslav Tkachenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Microservice with Akka, Spray and Camel]]></title>
    <link href="http://sap1ens.com/blog/2014/07/13/microservice-with-akka-spray-and-camel/"/>
    <updated>2014-07-13T15:44:37-07:00</updated>
    <id>http://sap1ens.com/blog/2014/07/13/microservice-with-akka-spray-and-camel</id>
    <content type="html"><![CDATA[<p><a href="http://wayfinder.co/pathways/53536427f7040a11002ae407/a-field-guide-to-microservices-april-2014-edition">Microservices architecture</a> is a popular trend right now. I don&rsquo;t want to repeat anything about microservices in general, but instead I want to introduce an example project of a microservice based on Akka, Spray and Camel.</p>

<p><strong><a href="https://github.com/sap1ens/akka-microservice">akka-microservice</a></strong> is based on one of the Typesafe Activator templates, but it&rsquo;s very (really) simple and very easy to learn &ndash; just go and checkout the codebase. It doesn&rsquo;t contain any front-end parts, just pure Scala.</p>

<p>Application has a lot of handy stuff:</p>

<ul>
<li>Easy to test Akka system with a sample actor</li>
<li>Spray-based RESTful API with full <a href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing">CORS</a> support</li>
<li>Actor and API sample tests</li>
<li>Camel/ActiveMQ extension for a handy integration with Akka system</li>
<li>Typesafe config with different profiles for production and testing environments</li>
<li>Logback-SLF4J logging</li>
<li>Sbt assembly plugin for JAR-file creation with custom merge strategy</li>
</ul>


<p>So it&rsquo;s focused more on production usage, you can just take the project, rename a few files &amp; packages and it&rsquo;s ready to be deployed! Just write your actors and routes. Happy hAkking! :)</p>
]]></content>
  </entry>
  
</feed>
