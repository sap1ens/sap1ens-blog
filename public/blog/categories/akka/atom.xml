<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Akka | sap1ens blog]]></title>
  <link href="http://sap1ens.com/blog/categories/akka/atom.xml" rel="self"/>
  <link href="http://sap1ens.com/"/>
  <updated>2016-07-17T19:51:56-07:00</updated>
  <id>http://sap1ens.com/</id>
  <author>
    <name><![CDATA[Yaroslav Tkachenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Polyglotconf 2016 Talk]]></title>
    <link href="http://sap1ens.com/blog/2016/05/28/polyglotconf-2016-talk/"/>
    <updated>2016-05-28T16:13:33-07:00</updated>
    <id>http://sap1ens.com/blog/2016/05/28/polyglotconf-2016-talk</id>
    <content type="html"><![CDATA[<p>Today I participated in <a href="http://www.polyglotconf.com">Polyglotconf</a> 3rd year in a row. This time I was prepared though, I wanted to talk about microservices and different advantages and disadvantages you can have if you use messaging as your main internal communication protocol. Also, it makes perfect sense for me to use Actors to build the actual microservices and I tried to explain why.</p>

<p>It seems like this topic is quite popular nowadays and I got the biggest auditorium as well as dozens and dozens of interested people.</p>

<p><a href="http://www.slideshare.net/sap1ens/why-actorbased-systems-are-the-best-for-microservices">My slides</a>:</p>

<iframe src="http://sap1ens.com//www.slideshare.net/slideshow/embed_code/key/wfNzLXVfyg0aTx" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vancouver Scala Meetup Talk]]></title>
    <link href="http://sap1ens.com/blog/2015/11/15/vancouver-scala-meetup-talk/"/>
    <updated>2015-11-15T09:25:17-08:00</updated>
    <id>http://sap1ens.com/blog/2015/11/15/vancouver-scala-meetup-talk</id>
    <content type="html"><![CDATA[<p>Last few months at Bench Accounting I&rsquo;ve been working on an eventing system for our microservices stack. We outgrown our legacy system and had new requirements: new messaging app! So it was clear that we need something more flexible, robust and nicer to work with.</p>

<p>The new eventing system was finished a couple of weeks ago and it has been running in production for a while. This week I gave a talk at <a href="http://www.meetup.com/vancouver-scala/">Vancouver Scala</a> meetup about the high-level overview of the system, implementation details and some challenges we faced.</p>

<p><a href="http://www.slideshare.net/sap1ens/building-eventing-systems-for-microservice-architecture">My slides</a>:</p>

<iframe src="http://sap1ens.com//www.slideshare.net/slideshow/embed_code/key/B9yUit0xSdKl2z" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Actors, Streams and Futures in Akka: what to use?]]></title>
    <link href="http://sap1ens.com/blog/2015/10/25/actors-streams-and-futures-in-akka/"/>
    <updated>2015-10-25T16:40:54-07:00</updated>
    <id>http://sap1ens.com/blog/2015/10/25/actors-streams-and-futures-in-akka</id>
    <content type="html"><![CDATA[<p>Akka ecosystem provides a rich set of tools nowadays: you can use classic Akka Actors, well-known Scala Futures or relatively new Akka Streams. Because all these tools can help you to build concurrent applications you might start comparing them. Or even <a href="http://eng.localytics.com/akka-streams-akka-without-the-actors/">say that Actors are bad and Streams are much better</a>.</p>

<p>I think that every approach has its own use cases, as well as pros and cons.</p>

<!-- more -->


<p><strong>Actors model</strong> has two major advantages: control flow and state.</p>

<p>Control flow is very natural to Actor models, you can express quite complicated algorithms with relatively simple Actor structures. Supervision hierarchy helps to make this structure resilient. Also, Actor can be a structural unit that maps nicely to a Service from DDD.</p>

<p>So, it’s possible to design the whole application using Actors. Streams and Futures usually handle only parts of the application business logic.</p>

<p>Stateful actors is a powerful concept. Akka Clustering, Persistence and Distributed Data intend to use internal Actor state, coordinated or replicated in different forms. Streams and Futures also have state, but short-lived, usually.</p>

<p><strong>Streams</strong> were created to handle asynchronous data pipelines with non-blocking back pressure. So it’s the best tool to use for any kind of data processing, file transformations, ETL pipelines, messaging and eventing solutions.</p>

<p>It looks like an overkill to use Streams for simple asynchronous tasks, Futures seem to be a better option.</p>

<p><strong>Future</strong> is the simplest concurrency mechanism in the Akka world. It’s just an asynchronous task with a timeout. It can be used to run a processes in background or to be a connection between other tools. For example, Actors can use “ask” pattern to return a Future as a result of a communication between them. It’s also possible to “pipe” results of a Future back to an Actor. And Streams can return Futures as a result of materialization.</p>

<p>Instead of a conclusion: JVM and Akka ecosystems have very rich concurrency tools and it’s important to realize advantages, disadvantages and ways to combine them with each other.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Microservice with Akka, Spray and Camel]]></title>
    <link href="http://sap1ens.com/blog/2014/07/13/microservice-with-akka-spray-and-camel/"/>
    <updated>2014-07-13T15:44:37-07:00</updated>
    <id>http://sap1ens.com/blog/2014/07/13/microservice-with-akka-spray-and-camel</id>
    <content type="html"><![CDATA[<p><a href="http://wayfinder.co/pathways/53536427f7040a11002ae407/a-field-guide-to-microservices-april-2014-edition">Microservices architecture</a> is a popular trend right now. I don&rsquo;t want to repeat anything about microservices in general, but instead I want to introduce an example project of a microservice based on Akka, Spray and Camel.</p>

<p><strong><a href="https://github.com/sap1ens/akka-microservice">akka-microservice</a></strong> is based on one of the Typesafe Activator templates, but it&rsquo;s very (really) simple and very easy to learn &ndash; just go and checkout the codebase. It doesn&rsquo;t contain any front-end parts, just pure Scala.</p>

<p>Application has a lot of handy stuff:</p>

<ul>
<li>Easy to test Akka system with a sample actor</li>
<li>Spray-based RESTful API with full <a href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing">CORS</a> support</li>
<li>Actor and API sample tests</li>
<li>Camel/ActiveMQ extension for a handy integration with Akka system</li>
<li>Typesafe config with different profiles for production and testing environments</li>
<li>Logback-SLF4J logging</li>
<li>Sbt assembly plugin for JAR-file creation with custom merge strategy</li>
</ul>


<p>So it&rsquo;s focused more on production usage, you can just take the project, rename a few files &amp; packages and it&rsquo;s ready to be deployed! Just write your actors and routes. Happy hAkking! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Road to Akka Cluster]]></title>
    <link href="http://sap1ens.com/blog/2013/12/08/the-road-to-akka-cluster/"/>
    <updated>2013-12-08T19:03:09-08:00</updated>
    <id>http://sap1ens.com/blog/2013/12/08/the-road-to-akka-cluster</id>
    <content type="html"><![CDATA[<p>Totally awesome <a href="http://skillsmatter.com/podcast/home/jonas-boner">presentation</a> about distributed computing and Akka Cluster by Jonas Bonér from Scala eXchange 2013. You should definitely spend 1 hour for it! Slides can be found <a href="http://www.slideshare.net/jboner/the-road-to-akka-cluster-and-beyond">here</a>.</p>
]]></content>
  </entry>
  
</feed>
