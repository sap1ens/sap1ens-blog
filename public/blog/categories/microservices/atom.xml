<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Microservices | sap1ens blog]]></title>
  <link href="http://sap1ens.com/blog/categories/microservices/atom.xml" rel="self"/>
  <link href="http://sap1ens.com/"/>
  <updated>2016-07-17T19:51:56-07:00</updated>
  <id>http://sap1ens.com/</id>
  <author>
    <name><![CDATA[Yaroslav Tkachenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Polyglotconf 2016 Talk]]></title>
    <link href="http://sap1ens.com/blog/2016/05/28/polyglotconf-2016-talk/"/>
    <updated>2016-05-28T16:13:33-07:00</updated>
    <id>http://sap1ens.com/blog/2016/05/28/polyglotconf-2016-talk</id>
    <content type="html"><![CDATA[<p>Today I participated in <a href="http://www.polyglotconf.com">Polyglotconf</a> 3rd year in a row. This time I was prepared though, I wanted to talk about microservices and different advantages and disadvantages you can have if you use messaging as your main internal communication protocol. Also, it makes perfect sense for me to use Actors to build the actual microservices and I tried to explain why.</p>

<p>It seems like this topic is quite popular nowadays and I got the biggest auditorium as well as dozens and dozens of interested people.</p>

<p><a href="http://www.slideshare.net/sap1ens/why-actorbased-systems-are-the-best-for-microservices">My slides</a>:</p>

<iframe src="http://sap1ens.com//www.slideshare.net/slideshow/embed_code/key/wfNzLXVfyg0aTx" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple checklist before starting to implement microservices]]></title>
    <link href="http://sap1ens.com/blog/2015/07/04/simple-checklist-before-starting-to-implement-microservices/"/>
    <updated>2015-07-04T20:53:20-07:00</updated>
    <id>http://sap1ens.com/blog/2015/07/04/simple-checklist-before-starting-to-implement-microservices</id>
    <content type="html"><![CDATA[<p>Over the last few months I’ve seen so many questions about microservices from people who <em>clearly</em> don’t need them. Or just not ready yet. So I made this simple checklist, if you answered “no” at least once &ndash; you’re not ready for microservices architecture right now. Please don’t feel <a href="http://www.thoughtworks.com/insights/blog/are-you-infected-microservice-envy">Microservice envy</a> :)</p>

<ol>
<li>Do you understand Domain Driven Design? Can you split your system in a set of services with clear boundaries?</li>
<li>Do you understand how and when to use synchronous and asynchronous communication?</li>
<li>Do you agree to have eventual consistent data in your system?</li>
<li>Do you use modern DevOps practices to have automated configuration management, continuous deployment, health checks &amp; autoscaling, monitoring &amp; alerts, etc.?</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Microservice with Akka, Spray and Camel]]></title>
    <link href="http://sap1ens.com/blog/2014/07/13/microservice-with-akka-spray-and-camel/"/>
    <updated>2014-07-13T15:44:37-07:00</updated>
    <id>http://sap1ens.com/blog/2014/07/13/microservice-with-akka-spray-and-camel</id>
    <content type="html"><![CDATA[<p><a href="http://wayfinder.co/pathways/53536427f7040a11002ae407/a-field-guide-to-microservices-april-2014-edition">Microservices architecture</a> is a popular trend right now. I don&rsquo;t want to repeat anything about microservices in general, but instead I want to introduce an example project of a microservice based on Akka, Spray and Camel.</p>

<p><strong><a href="https://github.com/sap1ens/akka-microservice">akka-microservice</a></strong> is based on one of the Typesafe Activator templates, but it&rsquo;s very (really) simple and very easy to learn &ndash; just go and checkout the codebase. It doesn&rsquo;t contain any front-end parts, just pure Scala.</p>

<p>Application has a lot of handy stuff:</p>

<ul>
<li>Easy to test Akka system with a sample actor</li>
<li>Spray-based RESTful API with full <a href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing">CORS</a> support</li>
<li>Actor and API sample tests</li>
<li>Camel/ActiveMQ extension for a handy integration with Akka system</li>
<li>Typesafe config with different profiles for production and testing environments</li>
<li>Logback-SLF4J logging</li>
<li>Sbt assembly plugin for JAR-file creation with custom merge strategy</li>
</ul>


<p>So it&rsquo;s focused more on production usage, you can just take the project, rename a few files &amp; packages and it&rsquo;s ready to be deployed! Just write your actors and routes. Happy hAkking! :)</p>
]]></content>
  </entry>
  
</feed>
