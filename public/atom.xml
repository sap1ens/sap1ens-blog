<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[sap1ens blog]]></title>
  <link href="http://sap1ens.com/atom.xml" rel="self"/>
  <link href="http://sap1ens.com/"/>
  <updated>2016-07-17T19:51:56-07:00</updated>
  <id>http://sap1ens.com/</id>
  <author>
    <name><![CDATA[Yaroslav Tkachenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[Syrup - Scrum CLI tool]]></title>
    <link href="http://sap1ens.com/blog/2016/07/10/syrup-scrum-cli-tool/"/>
    
    <updated>2016-07-10T19:25:15-07:00</updated>
    <id>http://sap1ens.com/blog/2016/07/10/syrup-scrum-cli-tool</id>
    
    <content type="html"><![CDATA[<p>At Bench we’re convinced that GitHub should be a central place for everything project-related: codebase, documentation, tasks. That’s why we don’t use any specific Project Management software, but instead we try to use GitHub.</p>

<p>Obviously GitHub has a very limited set of features: issues, labels, milestones. But, surprisingly, it’s good enough foundation that can be used by other services, for example <a href="https://waffle.io">Waffle.io</a>.</p>

<p>Waffle gives you Kanban-style dashboard for managing your tasks. It has two-way synchronization with GitHub, so every change in GitHub is propagated to Waffle in near real-time and vice versa. Waffle also uses labels to organize issues in columns, which makes everything easier from the GitHub side.</p>

<p>Still, there are lots of problems if you want to use GitHub &amp; Waffle for your Scrum process. That’s why I’ve been working on <a href="https://github.com/sap1ens/syrup">syrup</a>, CLI tool for Scrum. <a href="https://github.com/sap1ens/syrup/blob/master/README.md">Readme</a> has lots of details describing Waffle problems and suggested workflow to overcome them. It’s published as <a href="https://www.npmjs.com/package/syrup-cli">npm module</a>, so it’s really easy to install.</p>

<p>From technical point of view it’s a very simple Node.js/ES6 app (using Babel) that mostly uses GitHub API for fetching data.</p>

<p>PS: currently I investigate <a href="https://www.zenhub.com">ZenHub</a> as a Waffle &amp; Syrup replacement. It solves the same problems and brings even more features, like built-in epics and burndown charts. At the same time, Waffle is completely free even for private repositories (and ZenHub <a href="https://www.zenhub.com/pricing">is not</a>). Syrup still can be useful for ZenHub though, you can find more details in <a href="https://github.com/sap1ens/syrup/blob/master/README.md#zenhub-workflow">Readme</a>.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Postgres JSONB indexing is tricky]]></title>
    <link href="http://sap1ens.com/blog/2016/06/19/postgres-jsonb-indexing-is-tricky/"/>
    
    <updated>2016-06-19T18:39:15-07:00</updated>
    <id>http://sap1ens.com/blog/2016/06/19/postgres-jsonb-indexing-is-tricky</id>
    
    <content type="html"><![CDATA[<p>I’m not a Postgres expert, but I’ve been using it for about 6 months as an Event Store database. At Bench we’ve built our own eventing system on top of ActiveMQ, Camel and Akka and we use Postgres to persist every single Domain Event.</p>

<p>Our event schema is very flexible and currently represented in JSON. We chose Postgres for persistence, because of the great JSON support. As you probably know, Postgres 9.4 introduced JSONB type, which is an advanced JSON type that supports indexing. Obviously, you should index all your key fields, but it can be tricky. Let me share what we’ve discovered.</p>

<!-- more -->


<h2>Problem</h2>

<p>So, we have a query like this:</p>

<blockquote><p>select &ldquo;id&rdquo;, &ldquo;created_at&rdquo;, &ldquo;version&rdquo;, &ldquo;name&rdquo;, &ldquo;context&rdquo;, &ldquo;assets&rdquo; from &ldquo;event&rdquo; where (&ldquo;assets&rdquo; @> &lsquo;[{&ldquo;resourceId&rdquo;: &ldquo;569ee61ee4b0e7dd960dcee3&rdquo;}]&rsquo;) or (&ldquo;assets&rdquo; @> &lsquo;[{&ldquo;resourceId&rdquo;: &ldquo;874874&rdquo;}]&rsquo; ) or (&ldquo;assets&rdquo; @> &lsquo;[{&ldquo;resourceId&rdquo;: &ldquo;875187&rdquo;}]&rsquo; ) or (&ldquo;assets&rdquo; @> &lsquo;[{&ldquo;resourceId&rdquo;: &ldquo;858164&rdquo;}]&rsquo; ) or (&ldquo;assets&rdquo; @> &lsquo;[{&ldquo;resourceId&rdquo;: &ldquo;858567&rdquo;}]&rsquo;) order by &ldquo;created_at&rdquo; desc limit 1000 offset 0</p></blockquote>

<p><code>assets</code> field is a JSON array that contains different entities (objects). Some of them have <code>resourceId</code> field. In this query we want to find all events that contain assets with specified <code>resourceId</code>s. We only pass 5 <code>resourceId</code>s here, but in practice we can have many more.</p>

<p>Of course we have an index on this field:</p>

<blockquote><p>CREATE INDEX event_idx_assets ON event USING gin (assets jsonb_path_ops)</p></blockquote>

<p>But… when you run the query, it can be REALLY slow. Let’s run <code>analyze</code>:</p>

<blockquote><p>explain analyze select &ldquo;id&rdquo;, &ldquo;created_at&rdquo;, &ldquo;version&rdquo;, &ldquo;name&rdquo;, &ldquo;context&rdquo;, &ldquo;assets&rdquo; from &ldquo;event&rdquo; where (&ldquo;assets&rdquo; @> &lsquo;[{&ldquo;resourceId&rdquo;: &ldquo;569ee61ee4b0e7dd960dcee3&rdquo;}]&rsquo;) or (&ldquo;assets&rdquo; @> &lsquo;[{&ldquo;resourceId&rdquo;: &ldquo;874874&rdquo;}]&rsquo; ) or (&ldquo;assets&rdquo; @> &lsquo;[{&ldquo;resourceId&rdquo;: &ldquo;875187&rdquo;}]&rsquo; ) or (&ldquo;assets&rdquo; @> &lsquo;[{&ldquo;resourceId&rdquo;: &ldquo;858164&rdquo;}]&rsquo; ) or (&ldquo;assets&rdquo; @> &lsquo;[{&ldquo;resourceId&rdquo;: &ldquo;858567&rdquo;}]&rsquo;) order by &ldquo;created_at&rdquo; desc limit 1000 offset 0</p></blockquote>

<p>Results:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Limit  (cost=0.43..19176.24 rows=1000 width=322) (actual time=46.737..2730.530 rows=8 loops=1)
</span><span class='line'> -&gt;  Index Scan Backward using event_idx_created_at on event  (cost=0.43..142898.56 rows=7452 width=322) (actual time=46.733..2730.505 rows=8 loops=1)
</span><span class='line'>       Filter: ((assets @&gt; '[{"resourceId": "569ee61ee4b0e7dd960dcee3"}]'::jsonb) OR (assets @&gt; '[{"resourceId": "874874"}]'::jsonb) OR (assets @&gt; '[{"resourceId": "875187"}]'::jsonb) OR (assets @&gt; '[{"resourceId": "858164"}]'::jsonb) OR (assets @&gt; '[{"resourceId": "858567"}]'::jsonb))
</span><span class='line'>       Rows Removed by Filter: 1485296
</span><span class='line'>Planning time: 0.134 ms
</span><span class='line'>Execution time: 2730.569 ms</span></code></pre></td></tr></table></div></figure>


<p>Wait… It doesn’t use our index! And it’s very slow because of that. But why? If you read documentation and StackOverflow discussions about indexing, you’ll see that it should work. There is no reason why it shouldn’t…</p>

<p>We’ve spent significant amount of time trying to understand why this index doesn’t work. After some we did an experiment &ndash; what if you run the query with only one <code>resourceId</code>?</p>

<blockquote><p>explain analyze select &ldquo;id&rdquo;, &ldquo;created_at&rdquo;, &ldquo;version&rdquo;, &ldquo;name&rdquo;, &ldquo;context&rdquo;, &ldquo;assets&rdquo; from &ldquo;event&rdquo; where (&ldquo;assets&rdquo; @> &lsquo;[{&ldquo;resourceId&rdquo;: &ldquo;569ee61ee4b0e7dd960dcee3&rdquo;}]&rsquo;) order by &ldquo;created_at&rdquo; desc limit 1000 offset 0</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Limit  (cost=6725.17..6727.67 rows=1000 width=322) (actual time=3.732..3.735 rows=1 loops=1)
</span><span class='line'> -&gt;  Sort  (cost=6725.17..6728.91 rows=1493 width=322) (actual time=3.728..3.729 rows=1 loops=1)
</span><span class='line'>       Sort Key: created_at
</span><span class='line'>       Sort Method: quicksort  Memory: 25kB
</span><span class='line'>       -&gt;  Bitmap Heap Scan on event  (cost=1315.57..6646.46 rows=1493 width=322) (actual time=3.716..3.718 rows=1 loops=1)
</span><span class='line'>             Recheck Cond: (assets @&gt; '[{"resourceId": "569ee61ee4b0e7dd960dcee3"}]'::jsonb)
</span><span class='line'>             Heap Blocks: exact=1
</span><span class='line'>             -&gt;  Bitmap Index Scan on event_idx_assets  (cost=0.00..1315.20 rows=1493 width=0) (actual time=3.700..3.700 rows=1 loops=1)
</span><span class='line'>                   Index Cond: (assets @&gt; '[{"resourceId": "569ee61ee4b0e7dd960dcee3"}]'::jsonb)
</span><span class='line'>Planning time: 0.116 ms
</span><span class='line'>Execution time: 3.771 ms</span></code></pre></td></tr></table></div></figure>


<p>It works! How about 3?</p>

<blockquote><p>explain analyze select &ldquo;id&rdquo;, &ldquo;created_at&rdquo;, &ldquo;version&rdquo;, &ldquo;name&rdquo;, &ldquo;context&rdquo;, &ldquo;assets&rdquo; from &ldquo;event&rdquo; where (&ldquo;assets&rdquo; @> &lsquo;[{&ldquo;resourceId&rdquo;: &ldquo;569ee61ee4b0e7dd960dcee3&rdquo;}]&rsquo;) or (&ldquo;assets&rdquo; @> &lsquo;[{&ldquo;resourceId&rdquo;: &ldquo;874874&rdquo;}]&rsquo; ) or (&ldquo;assets&rdquo; @> &lsquo;[{&ldquo;resourceId&rdquo;: &ldquo;875187&rdquo;}]&rsquo; ) order by &ldquo;created_at&rdquo; desc limit 1000 offset 0</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Limit  (cost=18630.81..18633.31 rows=1000 width=322) (actual time=10.453..10.462 rows=3 loops=1)
</span><span class='line'> -&gt;  Sort  (cost=18630.81..18642.00 rows=4476 width=322) (actual time=10.450..10.453 rows=3 loops=1)
</span><span class='line'>       Sort Key: created_at
</span><span class='line'>       Sort Method: quicksort  Memory: 26kB
</span><span class='line'>       -&gt;  Bitmap Heap Scan on event  (cost=3948.96..18385.39 rows=4476 width=322) (actual time=10.430..10.439 rows=3 loops=1)
</span><span class='line'>             Recheck Cond: ((assets @&gt; '[{"resourceId": "569ee61ee4b0e7dd960dcee3"}]'::jsonb) OR (assets @&gt; '[{"resourceId": "874874"}]'::jsonb) OR (assets @&gt; '[{"resourceId": "875187"}]'::jsonb))
</span><span class='line'>             Heap Blocks: exact=1
</span><span class='line'>             -&gt;  BitmapOr  (cost=3948.96..3948.96 rows=4480 width=0) (actual time=10.416..10.416 rows=0 loops=1)
</span><span class='line'>                   -&gt;  Bitmap Index Scan on event_idx_assets  (cost=0.00..1315.20 rows=1493 width=0) (actual time=3.708..3.708 rows=1 loops=1)
</span><span class='line'>                         Index Cond: (assets @&gt; '[{"resourceId": "569ee61ee4b0e7dd960dcee3"}]'::jsonb)
</span><span class='line'>                   -&gt;  Bitmap Index Scan on event_idx_assets  (cost=0.00..1315.20 rows=1493 width=0) (actual time=3.354..3.354 rows=1 loops=1)
</span><span class='line'>                         Index Cond: (assets @&gt; '[{"resourceId": "874874"}]'::jsonb)
</span><span class='line'>                   -&gt;  Bitmap Index Scan on event_idx_assets  (cost=0.00..1315.20 rows=1493 width=0) (actual time=3.349..3.349 rows=1 loops=1)
</span><span class='line'>                         Index Cond: (assets @&gt; '[{"resourceId": "875187"}]'::jsonb)
</span><span class='line'>Planning time: 0.120 ms
</span><span class='line'>Execution time: 10.525 ms</span></code></pre></td></tr></table></div></figure>


<p>Success! It seems like somewhere internally Postgres decides to optimize this query differently depending on the number of conditions you pass for the GIN indexed field. In our case index only worked with 1, 2 and 3 conditions.</p>

<h2>Solution</h2>

<p>Well, you can’t really fix the indexing, but at least you know how to use it :) We ended up chunking one big query with lots of conditions into multiple queries containing only 3 conditions and merging results together. Unexpectedly, it’s <em>much</em> faster!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Polyglotconf 2016 Talk]]></title>
    <link href="http://sap1ens.com/blog/2016/05/28/polyglotconf-2016-talk/"/>
    
    <updated>2016-05-28T16:13:33-07:00</updated>
    <id>http://sap1ens.com/blog/2016/05/28/polyglotconf-2016-talk</id>
    
    <content type="html"><![CDATA[<p>Today I participated in <a href="http://www.polyglotconf.com">Polyglotconf</a> 3rd year in a row. This time I was prepared though, I wanted to talk about microservices and different advantages and disadvantages you can have if you use messaging as your main internal communication protocol. Also, it makes perfect sense for me to use Actors to build the actual microservices and I tried to explain why.</p>

<p>It seems like this topic is quite popular nowadays and I got the biggest auditorium as well as dozens and dozens of interested people.</p>

<p><a href="http://www.slideshare.net/sap1ens/why-actorbased-systems-are-the-best-for-microservices">My slides</a>:</p>

<iframe src="http://sap1ens.com//www.slideshare.net/slideshow/embed_code/key/wfNzLXVfyg0aTx" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Static typing and refactoring]]></title>
    <link href="http://sap1ens.com/blog/2016/05/22/static-typing-and-refactoring/"/>
    
    <updated>2016-05-22T20:37:31-07:00</updated>
    <id>http://sap1ens.com/blog/2016/05/22/static-typing-and-refactoring</id>
    
    <content type="html"><![CDATA[<p>A few months ago I finished a <strong>huge</strong> refactoring of a Java/Scala project. It took 2 weeks and only 2 engineers to actually implement all the changes, make sure it worked and deploy. Surprisingly, deployment was <em>really</em> smooth, we didn’t encounter any major issues.</p>

<p>I think the reason why it went so good was statically typed language + amazing IDE support for that. I can’t imagine doing similar refactoring in Ruby/Python/Node, for example.</p>

<p><img src="http://sap1ens.com/images/posts/refactoring.png"></p>

<!-- more -->


<h2>The task</h2>

<p>Project consists from multiple layers:</p>

<ol>
<li>HTTP API and serialization/deserialization logic (Scala/Jersey)</li>
<li>Service layer (Scala/Java/Spring)</li>
<li>Model (Java/Hibernate/AspectJ)</li>
<li>Database (MySQL)</li>
</ol>


<p>Our goal was to refactor a bunch of model/database fields, mostly renaming (things like <code>TransactionalDocument.TransactionalDocumentId</code> &ndash;> <code>JournalEntry.id</code>). As you can see it mostly affects model and database layers, but the same fields are used in service level as well as API serialization/deserialization logic &ndash; basically the whole system is affected.</p>

<h2>Refactoring</h2>

<p>First of all, we divided all model classes between 2 engineers and started to deal with classes one by one.</p>

<p>Our toolkit included IntelliJ IDEA and some shell automation for applying database schema and changesets.</p>

<p>Process was simple &ndash; rename model field using IntelliJ IDEA refactoring feature, rename database field in a schema file and verify your changes by:</p>

<ul>
<li>compiling the project (minute[s])</li>
<li>recreating database from schema and changesets (seconds)</li>
</ul>


<p>A few words about IntelliJ IDEA: I’ve been using this IDE for years and I’m so thankful to Jetbrains for this amazing piece of tech (and also I’m a little bit proud, since it’s built by smart Russian guys). Because Java and Scala are statically typed languages, IDE is able to trace <em>every single usage of a type or a field</em>, including all layers I mentioned. You just run rename command, confirm all changes in preview, if changeset is large, and apply it in seconds! And you can be absolutely sure that all changes are correct.</p>

<p>One more lesson from this exercise &ndash; it’s always a good idea to NOT expose your model fields directly in API. We have an explicit serialization/deserialization logic in that project and I didn’t have to also refactor front-end app (which is mostly Coffeescript) &ndash; so good! ;)</p>

<p>Also I want to notice that compilation was enough to test changes, I didn’t even need to run the app to check intermediate results. It allowed us to iterate as fast as possible (which was not really fast, because it runs <strong>3</strong> compilers internally: AspectJ, Java and Scala).</p>

<p>We obviously had a huge set of tests (hundreds) + some things could’ve been tested only in runtime (like Spring configuration), but again: you can mostly rely on IDE/compilation to make sure everything works smoothly. Which is an amazing feeling :)</p>

<p>By the way, tests actually helped to discover something that IDE has missed. We use Hibernate and write all queries using JPQL. These queries are represented by simple strings, but IntelliJ IDEA is mostly able to parse those strings and understand actual classes and fields used there. I said mostly, because for some reason sometimes it missed some of the queries and we only could detect those using tests.</p>

<h2>Summary</h2>

<p>So, if you’re planning to work on a big refactoring I advice:</p>

<ul>
<li>Understand the easiest way to verify your changes. If you use a statically typed language, compilation is usually enough, but you should always have tests to cover your main code paths</li>
<li>Make sure you know how to make iteration loop as fast as possible using previous verification step. Refactoring always needs time and it’s important to optimize your workflow</li>
</ul>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[About technical leadership]]></title>
    <link href="http://sap1ens.com/blog/2016/04/25/about-technical-leadership/"/>
    
    <updated>2016-04-25T21:06:16-07:00</updated>
    <id>http://sap1ens.com/blog/2016/04/25/about-technical-leadership</id>
    
    <content type="html"><![CDATA[<p>Software development teams naturally have leaders. I see two types of leaders: team leads and technical leads.</p>

<p>Team leads care about projects, tasks, velocity and related things and usually have titles like Team Lead, Project Manager or Technical Project Manager. They can be programmers and know how to code, but their main focus is planning projects and organizing processes.</p>

<p>Today I want to talk about technical leads. You’ll probably call them Engineering Lead or Lead Engineer. Their role is not always clear, sometime they can lead a team and participate in the project management activities, but keep the focus on coding and delivering products. Sometimes they can have a specialization on some specific area or domain, like Lead Back-end Engineer or similar. But they have something in common.</p>

<p>Recently I’ve been asked by a coworker who wants to move to the technical leadership &ndash; “what do I need to improve”? I wasn’t ready to answer, because I didn’t have a clear picture what technical leaders do, precisely :) I started to think and reflect more and I think I have pretty good understanding now.</p>

<p>Software engineers have clear goals: making individual contributions and delivering products/features.</p>

<p>Technical leaders care about opposite: empowering a <em>team</em>, making sure a <em>team</em> uses best practices like pair programming or writes good tests, invests into documentation and tooling, cares a lot about reliable architecture and clear codebase, you name it. Goal of a technical lead is to make sure that everyone in a team contributes as much as they can and constantly push efficiency and quality of work for the whole team forward.</p>

<p>Again, it’s not about being “the guy”, it’s about thinking of team contributions more than yours.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Complexity and software]]></title>
    <link href="http://sap1ens.com/blog/2016/02/21/complexity-and-software/"/>
    
    <updated>2016-02-21T11:58:28-08:00</updated>
    <id>http://sap1ens.com/blog/2016/02/21/complexity-and-software</id>
    
    <content type="html"><![CDATA[<p>Software engineers like to discuss different aspects of their craft: elegant solutions, performance benchmarks, semantics of programming languages, the shortest webapp implementation with a favourite framework, etc. We like to argue why language X is better than Y and why framework A is faster/simpler/better to use than B.</p>

<p>Something that we don’t usually discuss is complexity. The important thing to realize: we can’t remove it. We can try to hide it, yes. But any relatively big system has complexity in some form, on some level.</p>

<p>As an example, let’s take a look at popular Sinatra-inspired web frameworks: Flask, Express, etc. It’s <strong>really</strong> simple to create a small webapp or RESTful API. Very simple. So simple that the whole implementation fits on one screen. But still, they hide complexity. Try to run them on multi-core and multi-node cluster efficiently and reliably. That should be relatively “easy” to do, until your application has a state or you discover that not everything is thread-safe. Fun stuff. Distributed systems are hard.</p>

<p>Ok, how about the other side now. Toolkits like Erlang/OTP or Scala/Akka are considered to be complex and suited for building distributed systems. They move complexity to a different edge, so bootstrapping takes much more time, but “hard” problems are actually easier to solve. <a href="http://doc.akka.io/docs/akka/2.4.2/scala/cluster-singleton.html">Cluster Singleton</a> or <a href="http://doc.akka.io/docs/akka/2.4.2/scala/cluster-sharding.html">Cluster Sharding</a>? Yep, it’s there!</p>

<p>The same concept applies to programming languages. Everything has pros and cons. Complexity should always be an additional dimension that we should take into consideration, discuss it and plan accordingly.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Two absolute must read books for software engineers]]></title>
    <link href="http://sap1ens.com/blog/2015/12/27/two-absolute-must-read-books-for-software-engineers/"/>
    
    <updated>2015-12-27T17:18:06-08:00</updated>
    <id>http://sap1ens.com/blog/2015/12/27/two-absolute-must-read-books-for-software-engineers</id>
    
    <content type="html"><![CDATA[<p>Nowadays you can find lots of “must-read” lists about software engineering in general, as well as specific topic or language. All these years I had an impression that some parts are missing from the big picture, especially for the beginners. Yes, it’s important to know your current language of choice in depth, or be an expert in some tool or technology. But you probably also feel that some common knowledge exists, that is between “Hello World” / MVC tutorials and books covering specific topics. I was lucky to find one of such books a while ago and recently I have found another one.</p>

<!-- more -->


<p><img src="http://sap1ens.com/images/posts/implementation-patterns.jpg" width="300"></p>

<p><a href="http://amzn.com/0321413091">Implementation Patterns by Kent Beck</a></p>

<p>I was introduced to Implementation Patterns a couple of years ago by my colleague Pavel. It’s an amazing collection of “how-to”s and recipes covering our day-to-day software design activities, but not on a high system level, instead it’s focused on a design of your classes / modules, clear naming and refactoring. It’s also very OOP-focused, but lots of principles are similar and can be used in FP.</p>

<p><img src="http://sap1ens.com/images/posts/iddd.jpg" width="300"></p>

<p><a href="http://amzn.com/0321834577">Implementing Domain-Driven Design by Vaughn Vernon</a></p>

<p>iDDD book is my recent finding. I’m still reading it, but I can already say that it’s something I’ve been looking for a very long time. I have huge problems with bootstrapping new engineers without real enterprise experience (read: experience with big and complicated domain-specific systems). It’s so challenging to explain SOA and DDD principles, because expertise in those areas can be very limited and knowledge is subtle. Also it has nice introduction to Event Sourcing and Eventual consistency.</p>

<p>From now on I’m going to recommend these books to every single new hire or beginner who needs an advice. Go and read them if you haven’t ;&ndash;)</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Vancouver Scala Meetup Talk]]></title>
    <link href="http://sap1ens.com/blog/2015/11/15/vancouver-scala-meetup-talk/"/>
    
    <updated>2015-11-15T09:25:17-08:00</updated>
    <id>http://sap1ens.com/blog/2015/11/15/vancouver-scala-meetup-talk</id>
    
    <content type="html"><![CDATA[<p>Last few months at Bench Accounting I&rsquo;ve been working on an eventing system for our microservices stack. We outgrown our legacy system and had new requirements: new messaging app! So it was clear that we need something more flexible, robust and nicer to work with.</p>

<p>The new eventing system was finished a couple of weeks ago and it has been running in production for a while. This week I gave a talk at <a href="http://www.meetup.com/vancouver-scala/">Vancouver Scala</a> meetup about the high-level overview of the system, implementation details and some challenges we faced.</p>

<p><a href="http://www.slideshare.net/sap1ens/building-eventing-systems-for-microservice-architecture">My slides</a>:</p>

<iframe src="http://sap1ens.com//www.slideshare.net/slideshow/embed_code/key/B9yUit0xSdKl2z" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Actors, Streams and Futures in Akka: what to use?]]></title>
    <link href="http://sap1ens.com/blog/2015/10/25/actors-streams-and-futures-in-akka/"/>
    
    <updated>2015-10-25T16:40:54-07:00</updated>
    <id>http://sap1ens.com/blog/2015/10/25/actors-streams-and-futures-in-akka</id>
    
    <content type="html"><![CDATA[<p>Akka ecosystem provides a rich set of tools nowadays: you can use classic Akka Actors, well-known Scala Futures or relatively new Akka Streams. Because all these tools can help you to build concurrent applications you might start comparing them. Or even <a href="http://eng.localytics.com/akka-streams-akka-without-the-actors/">say that Actors are bad and Streams are much better</a>.</p>

<p>I think that every approach has its own use cases, as well as pros and cons.</p>

<!-- more -->


<p><strong>Actors model</strong> has two major advantages: control flow and state.</p>

<p>Control flow is very natural to Actor models, you can express quite complicated algorithms with relatively simple Actor structures. Supervision hierarchy helps to make this structure resilient. Also, Actor can be a structural unit that maps nicely to a Service from DDD.</p>

<p>So, it’s possible to design the whole application using Actors. Streams and Futures usually handle only parts of the application business logic.</p>

<p>Stateful actors is a powerful concept. Akka Clustering, Persistence and Distributed Data intend to use internal Actor state, coordinated or replicated in different forms. Streams and Futures also have state, but short-lived, usually.</p>

<p><strong>Streams</strong> were created to handle asynchronous data pipelines with non-blocking back pressure. So it’s the best tool to use for any kind of data processing, file transformations, ETL pipelines, messaging and eventing solutions.</p>

<p>It looks like an overkill to use Streams for simple asynchronous tasks, Futures seem to be a better option.</p>

<p><strong>Future</strong> is the simplest concurrency mechanism in the Akka world. It’s just an asynchronous task with a timeout. It can be used to run a processes in background or to be a connection between other tools. For example, Actors can use “ask” pattern to return a Future as a result of a communication between them. It’s also possible to “pipe” results of a Future back to an Actor. And Streams can return Futures as a result of materialization.</p>

<p>Instead of a conclusion: JVM and Akka ecosystems have very rich concurrency tools and it’s important to realize advantages, disadvantages and ways to combine them with each other.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Scala Slick 3: How To Start, An Opinionated Guide]]></title>
    <link href="http://sap1ens.com/blog/2015/07/26/scala-slick-3-how-to-start/"/>
    
    <updated>2015-07-26T16:42:30-07:00</updated>
    <id>http://sap1ens.com/blog/2015/07/26/scala-slick-3-how-to-start</id>
    
    <content type="html"><![CDATA[<blockquote><p>Slick is a modern database query and access library for Scala. It allows you to work with stored data almost as if you were using Scala collections while at the same time giving you full control over when a database access happens and which data is transferred.</p></blockquote>

<p><a href="http://slick.typesafe.com">Slick</a> 3.0.0 became available a few months ago, but I’ve started a project earlier using 3.0.0-RC1. Now the project is released in production and everything seems to be working really well. In this post I want to introduce you to some of the Slick concepts and describe some gotchas and best practices that I have discovered.</p>

<!-- more -->


<h2>Intro</h2>

<p>If you haven’t seen Slick 3 in action a little example from docs for you:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">q3</span> <span class="k">=</span> <span class="k">for</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">c</span> <span class="k">&lt;-</span> <span class="n">coffees</span> <span class="k">if</span> <span class="n">c</span><span class="o">.</span><span class="n">price</span> <span class="o">&lt;</span> <span class="mf">9.0</span>
</span><span class='line'>  <span class="n">s</span> <span class="k">&lt;-</span> <span class="n">c</span><span class="o">.</span><span class="n">supplier</span>
</span><span class='line'><span class="o">}</span> <span class="k">yield</span> <span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="n">name</span><span class="o">,</span> <span class="n">s</span><span class="o">.</span><span class="n">name</span><span class="o">)</span>
</span><span class='line'><span class="c1">// Equivalent SQL code:</span>
</span><span class='line'><span class="c1">// select c.COF_NAME, s.SUP_NAME from COFFEES c, SUPPLIERS s where c.PRICE &lt; 9.0 and s.SUP_ID = c.SUP_ID</span>
</span></code></pre></td></tr></table></div></figure>


<p>Slick uses Functional Relational Mapping (FRM) which is obviously more suitable for functional programming than Object-relational mapping (ORM). So you have an impression that you work with Scala collections, but really code is translated to SQL. <a href="http://slick.typesafe.com/doc/3.0.0/introduction.html">More about that</a> if you’re interested.</p>

<h2>Reactive streams, Futures, non-blocking calls and making sense of it all</h2>

<p>About an year ago we were walking with <a href="https://twitter.com/agonigberg">Arthur Gonigberg</a> after a Scala meetup and discussing HTTP Scala frameworks. I’m a big fan of Spray and Arthur worked with Scalatra a lot. When I said that Spray is an asynchronous and non-blocking library, he asked about the database driver we use. It’s a really good question, because to be honest, an year ago I didn’t know any non-blocking database driver for Scala, except may be Reactive Mongo. But we didn’t use it.</p>

<p>Arthur’s point was: why do you care about non-blocking behaviour in your HTTP/API level if your database still blocks? And that’s true… at least partially. You still can do tricks with Futures and <code>blocking {}</code> stuff, but it’s a bit different.</p>

<p>Finally, our dreams may come true. Slick 3 was built on <a href="http://www.reactive-streams.org">Reactive Streams</a> implemented in Akka &ndash; tool that can provide asynchronous  and non-blocking streaming. But it’s important to know that you still use normal blocking database drivers, so the whole <em>asynchronicity</em> happens on the level higher. I’m not sure how I feel about that, but practically I don’t see any difference. I believe that the end goal for Slick is to use / implement non-blocking drivers though.</p>

<p>People often ask how to work with different queries in Slick 3 and what error handling mechanism they should use. Answer is simple, since Slick is an asynchronous library &ndash; use Futures. In my opinion, if you have a model type M, you can only have 3 result types: Future[M], Future[Option[M]] and Future[Seq[M]] (and Future[Unit], of course). If you need to have something different from Future &ndash; it’s probably worth to take a look at Slick 2.x again.</p>

<p>Also, Future makes perfect sense for error handling. It’s a monad, so you can use default Scala tools for working with monads as well as callbacks.</p>

<h2>Setup</h2>

<p>Setup a project with required dependencies and configuration is a non-trivial step already. <a href="http://slick.typesafe.com/doc/3.0.0/gettingstarted.html#quick-introduction">Documentation</a> mostly uses H2 Database in examples, but real setup for MySQL or Postgres is a bit different.</p>

<p>So, my example for Postgres 9.4.</p>

<p>application.conf:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">database</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">dataSourceClass</span> <span class="k">=</span> <span class="n">org</span><span class="o">.</span><span class="n">postgresql</span><span class="o">.</span><span class="n">ds</span><span class="o">.</span><span class="nc">PGSimpleDataSource</span>
</span><span class='line'>  <span class="n">properties</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">databaseName</span> <span class="k">=</span> <span class="err">“</span><span class="n">some_db</span><span class="err">”</span>
</span><span class='line'>    <span class="n">user</span> <span class="k">=</span> <span class="err">“</span><span class="n">local</span><span class="err">”</span>
</span><span class='line'>    <span class="n">password</span> <span class="k">=</span> <span class="err">“</span><span class="n">local</span><span class="err">”</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">numThreads</span> <span class="k">=</span> <span class="mi">10</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>or using JDBC url</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">database</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">dataSourceClass</span> <span class="k">=</span> <span class="n">org</span><span class="o">.</span><span class="n">postgresql</span><span class="o">.</span><span class="n">ds</span><span class="o">.</span><span class="nc">PGSimpleDataSource</span>
</span><span class='line'>  <span class="n">properties</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">url</span> <span class="k">=</span> <span class="err">“</span><span class="n">jdbc</span><span class="k">:</span><span class="kt">postgresql://some_url/some_db</span><span class="err">”</span>
</span><span class='line'>    <span class="kt">user</span> <span class="o">=</span> <span class="err">“</span><span class="n">local</span><span class="err">”</span>
</span><span class='line'>    <span class="n">password</span> <span class="k">=</span> <span class="err">“</span><span class="n">local</span><span class="err">”</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">numThreads</span> <span class="k">=</span> <span class="mi">10</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>build.sbt:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">libraryDependencies</span> <span class="o">++=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>  <span class="err">“</span><span class="n">com</span><span class="o">.</span><span class="n">typesafe</span><span class="o">.</span><span class="n">slick</span><span class="err">”</span> <span class="o">%%</span> <span class="err">“</span><span class="n">slick</span><span class="err">”</span> <span class="o">%</span> <span class="err">“</span><span class="mf">3.0</span><span class="o">.</span><span class="mi">0</span><span class="err">”</span><span class="o">,</span>
</span><span class='line'>  <span class="err">“</span><span class="n">com</span><span class="o">.</span><span class="n">zaxxer</span><span class="err">”</span> <span class="o">%</span> <span class="err">“</span><span class="nc">HikariCP</span><span class="o">-</span><span class="n">java6</span><span class="err">”</span> <span class="o">%</span> <span class="err">“</span><span class="mf">2.3</span><span class="o">.</span><span class="mi">2</span><span class="err">”</span><span class="o">,</span>
</span><span class='line'>  <span class="err">“</span><span class="n">org</span><span class="o">.</span><span class="n">postgresql</span><span class="err">”</span> <span class="o">%</span> <span class="err">“</span><span class="n">postgresql</span><span class="err">”</span> <span class="o">%</span> <span class="err">“</span><span class="mf">9.4</span><span class="o">-</span><span class="mi">1201</span><span class="o">-</span><span class="n">jdbc41</span><span class="err">”</span><span class="o">,</span>
</span><span class='line'>  <span class="c1">// …</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Model</h2>

<p>First of all, we need to create a Database object to run our queries and generate schema. It’s very simple to do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">db</span> <span class="k">=</span> <span class="nc">Database</span><span class="o">.</span><span class="n">forConfig</span><span class="o">(</span><span class="err">“</span><span class="n">database</span><span class="err">”</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where “database” refers to the config block from our application.conf file.</p>

<p>Now let’s create a model representing some Account and containing two fields &ndash; id and name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">slick.driver.PostgresDriver.api._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.Future</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.ExecutionContext.Implicits.global</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Account</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">name</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Accounts</span><span class="o">(</span><span class="n">tag</span><span class="k">:</span> <span class="kt">Tag</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Table</span><span class="o">[</span><span class="kt">Account</span><span class="o">](</span><span class="n">tag</span><span class="o">,</span> <span class="err">“</span><span class="nc">ACCOUNTS</span><span class="err">”</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">id</span> <span class="k">=</span> <span class="n">column</span><span class="o">[</span><span class="kt">Long</span><span class="o">](</span><span class="err">“</span><span class="nc">ID</span><span class="err">”</span><span class="o">,</span> <span class="n">O</span><span class="o">.</span><span class="nc">PrimaryKey</span><span class="o">,</span> <span class="n">O</span><span class="o">.</span><span class="nc">AutoInc</span><span class="o">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">name</span> <span class="k">=</span> <span class="n">column</span><span class="o">[</span><span class="kt">String</span><span class="o">](</span><span class="err">“</span><span class="nc">NAME</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="o">*</span> <span class="k">=</span> <span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">name</span><span class="o">)</span> <span class="o">&lt;&gt;</span> <span class="o">(</span><span class="nc">Account</span><span class="o">.</span><span class="n">tupled</span><span class="o">,</span> <span class="nc">Account</span><span class="o">.</span><span class="n">unapply</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">AccountsDAO</span> <span class="k">extends</span> <span class="nc">TableQuery</span><span class="o">(</span><span class="k">new</span> <span class="nc">Accounts</span><span class="o">(</span><span class="k">_</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">findById</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">Account</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="n">run</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">id</span> <span class="o">===</span> <span class="n">id</span><span class="o">).</span><span class="n">result</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">headOption</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">create</span><span class="o">(</span><span class="n">account</span><span class="k">:</span> <span class="kt">Account</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Account</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="n">run</span><span class="o">(</span><span class="k">this</span> <span class="n">returning</span> <span class="k">this</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">id</span><span class="o">)</span> <span class="n">into</span> <span class="o">((</span><span class="n">acc</span><span class="o">,</span> <span class="n">id</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">acc</span><span class="o">.</span><span class="n">copy</span><span class="o">(</span><span class="n">id</span> <span class="k">=</span> <span class="n">id</span><span class="o">))</span> <span class="o">+=</span> <span class="n">account</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">deleteById</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="n">run</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">id</span> <span class="o">===</span> <span class="n">id</span><span class="o">).</span><span class="n">delete</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few things you might notice:</p>

<p>We use <em>Account</em> case class to represent a model. It is possible to use regular Scala class, but case classes have too many benefits to avoid them.</p>

<p> <em>AccountsDAO</em> can be initialized differently, as a variable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="nc">AccountsDAO</span> <span class="k">=</span> <span class="nc">TableQuery</span><span class="o">[</span><span class="kt">Accounts</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>But I think an object is more useful. For example, you can add your custom methods to a DAO and there will be no difference between YourDAO.SlickCall and YourDAO.CustomCall. And in case of a variable you need to create your methods somewhere else.</p>

<p>Queries in Slick are lazy. It means that they are not executed unless we explicitly tell database to do so. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">AccountsDAO</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">id</span> <span class="o">===</span> <span class="n">id</span><span class="o">)</span> <span class="c1">// 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>doesn’t return any results, but some sort of a pointer to a query, so you can easily combine it with different methods.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">AccountsDAO</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">id</span> <span class="o">===</span> <span class="n">id</span><span class="o">).</span><span class="n">result</span> <span class="c1">// 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>doesn’t return any results, despite of its name.  But it returns a representation of a query. In this case we can execute this single query later or collect a sequence of queries and execute them all at once. Finally:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">db</span><span class="o">.</span><span class="n">run</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">id</span> <span class="o">===</span> <span class="n">id</span><span class="o">).</span><span class="n">result</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">headOption</span><span class="o">)</span> <span class="c1">// 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>returns Future[Option[Account]] (map is just a way to convert a list to an item, since we know that id is unique).</p>

<p>My rule of thumb is to use #1 and sometimes #2 queries for private methods you can combine together and #3 for a public interface.</p>

<p><em>create</em> method looks complicated. Why is that? We have a simple case class as a model object, so we need to specify all the fields. From the other side, <em>ID</em> is a field with auto-increment, so we can’t know the value of the <em>ID</em> field before we save the object. Solution is a bit tricky &ndash; you can specify any <em>ID</em> you want (I usually go with <em>0</em>) and then use method <em>returning</em> to get an auto-generated ID back. But because case classes are immutable, we have to copy our class. Oh, please show me the better solution :)</p>

<p>One of our imports (slick.driver.PostgresDriver.api._) contains all necessary operators and methods. It seems to me, that the interfaces of all slick.driver.*.api._ methods are similar and you can replace Postgres driver with MySQL driver without changing your database schema or queries. But to be honest I haven’t tried that :&ndash;/</p>

<h2>Tests</h2>

<p>There is nothing special about testing Slick queries, but I want to mention something useful for tests &ndash; database schema generation.
Imagine you have your SomeDAO1 and SomeDAO2. Every time you run a test you want to have a clean state in your database and recreate all tables. Slick allows you to do that. Every DAO has a method called <em>schema</em> and you can combine multiple DAOs to get a schema that contains all the tables you need. Syntax is simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">schema</span> <span class="k">=</span> <span class="nc">SomeDAO1</span><span class="o">.</span><span class="n">schema</span> <span class="o">++</span> <span class="nc">SomeDAO2</span><span class="o">.</span><span class="n">schema</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you have access to <em>create</em> and <em>drop</em> statements:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">schema</span><span class="o">.</span><span class="n">drop</span><span class="o">.</span><span class="n">statements</span>
</span><span class='line'><span class="n">schema</span><span class="o">.</span><span class="n">create</span><span class="o">.</span><span class="n">statements</span>
</span></code></pre></td></tr></table></div></figure>


<p>But there is a little issue with that. If any of your statement fails the whole schema generation process fails too, <strong>silently</strong> (<a href="https://github.com/slick/slick/issues/93">https://github.com/slick/slick/issues/93</a>). Solution that I use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">recreateSchema</span><span class="o">(</span><span class="n">database</span><span class="k">:</span> <span class="kt">Database</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">database</span><span class="o">.</span><span class="n">withSession</span> <span class="o">{</span> <span class="n">session</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="n">s</span> <span class="k">&lt;-</span> <span class="n">schema</span><span class="o">.</span><span class="n">drop</span><span class="o">.</span><span class="n">statements</span> <span class="o">++</span> <span class="n">schema</span><span class="o">.</span><span class="n">create</span><span class="o">.</span><span class="n">statements</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">session</span><span class="o">.</span><span class="n">withPreparedStatement</span><span class="o">(</span><span class="n">s</span><span class="o">)(</span><span class="k">_</span><span class="o">.</span><span class="n">execute</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">e</span><span class="k">:</span> <span class="kt">Throwable</span> <span class="o">=&gt;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, if some table doesn’t exist when you call <em>drop</em>, Slick won’t stop the schema regeneration.</p>

<h2>Summary</h2>

<p>I hope this little guide will help you to start with Slick 3, really great Scala library to work with almost every relational database. I&rsquo;ve tried to make it really concise and highlight the most unclear parts. Happy coding!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Simple checklist before starting to implement microservices]]></title>
    <link href="http://sap1ens.com/blog/2015/07/04/simple-checklist-before-starting-to-implement-microservices/"/>
    
    <updated>2015-07-04T20:53:20-07:00</updated>
    <id>http://sap1ens.com/blog/2015/07/04/simple-checklist-before-starting-to-implement-microservices</id>
    
    <content type="html"><![CDATA[<p>Over the last few months I’ve seen so many questions about microservices from people who <em>clearly</em> don’t need them. Or just not ready yet. So I made this simple checklist, if you answered “no” at least once &ndash; you’re not ready for microservices architecture right now. Please don’t feel <a href="http://www.thoughtworks.com/insights/blog/are-you-infected-microservice-envy">Microservice envy</a> :)</p>

<ol>
<li>Do you understand Domain Driven Design? Can you split your system in a set of services with clear boundaries?</li>
<li>Do you understand how and when to use synchronous and asynchronous communication?</li>
<li>Do you agree to have eventual consistent data in your system?</li>
<li>Do you use modern DevOps practices to have automated configuration management, continuous deployment, health checks &amp; autoscaling, monitoring &amp; alerts, etc.?</li>
</ol>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Polyglotconf quotes]]></title>
    <link href="http://sap1ens.com/blog/2015/05/31/polyglotconf-quotes/"/>
    
    <updated>2015-05-31T14:41:53-07:00</updated>
    <id>http://sap1ens.com/blog/2015/05/31/polyglotconf-quotes</id>
    
    <content type="html"><![CDATA[<p>Last week I went to one of the most interesting Vancouver IT events: Polyglot Unconference. It’s quite big event with 300+ people and a wide range of topics. <em>Unconference</em> is unusual format, you can take a look more at <a href="http://en.wikipedia.org/wiki/Unconference">Wikipedia</a>, but generally it means that there is no schedule before event and all participants pitch and vote for topics. So you might face absolutely anything from hardcore Haskell and Microservices to React Native and HTML5 semantics.</p>

<p>I wanted to share four quotes that I heard and found really interesting. May be they are obvious for somebody, but I think they are worth mentioning. Unfortunately I don’t remember all authors, so I’m going to specify only session titles.</p>

<!-- more -->


<h2>Lightning Talks: Learning to Learn</h2>

<p><em>“Don’t break the chain“.</em></p>

<p>It’s actually very simple and popular technique described <a href="http://lifehacker.com/281626/jerry-seinfelds-productivity-secret">here</a>.</p>

<p>Short version:</p>

<ul>
<li>Pick a goal</li>
<li>Mark off the days on which you work toward that goal</li>
<li>Use your chain of marked off days as a motivator</li>
</ul>


<p>Example:
<img src="https://www.evernote.com/l/ABiMvC-0mCFN8bGsRBvMxcDl0KxgBkGqmz8B/image.png" alt="" /></p>

<p>(and yes, there is a <a href="http://dontbreakthechain.com">website</a> for that!)</p>

<p>So, I think motivation is really important for all creative professions including Software Engineering. Procrastination is a well-known issue and a lot of people struggle because of that every day. I’m sure that “Don’t break the chain“ is a real tool we can use to settle down the struggle. Or at least try ;&ndash;)</p>

<h2>Microservices data consistency</h2>

<p><em>“Avoid joins, use cache instead”.</em></p>

<p>Microservices architecture brings a lot of questions regarding data consistency. We often hear concepts like event sourcing, CQRS, CRDTs, etc. But what if you just want to migrate your monolith with a bunch of joins in database level to microservices? Advice from Hootsuite is a bit provocative but still very useful &ndash; try to avoid joins as much as possible and use aggressive caching in your <a href="http://microservices.io/patterns/apigateway.html">Gateway</a> level.</p>

<h2>Hypermedia Web APIs</h2>

<p><em>“You have to control your API clients”.</em></p>

<p><a href="http://en.wikipedia.org/wiki/HATEOAS">HATEOAS</a> or Hypermedia as the Engine of Application State is a well-known, but still pretty new technique to the most of us. A very important thing you should know about it: if you want to release and <em>support</em> your HATEOAS-based API without hassle you have to control your API consumers. It doesn’t mean you can’t have a public API, it just means that you should provide API clients for major languages / SDKs and support them.</p>

<p>The reason behind is obvious: it’s really hard to propagate updates in HATEOAS-based APIs. Your client should be smart enough to understand changes in schemas, support multiple versions, expand resources, etc. Which is actually true for any complicated API, but in this case it’s almost mandatory.</p>

<h2>Distributed Systems &amp; Elasticsearch</h2>

<p><em>“Availability is something you can detect and fix”.</em></p>

<p><a href="http://en.wikipedia.org/wiki/CAP_theorem">CAP theorem</a> popularization made it easier to discuss distributed systems even for people without sophisticated knowledge in that area. In a very practical way you can rephrase CAP theorem to say that you can only built AP (Highly Available and Partition Tolerant) or CP (Strictly Consistent and Partition Tolerant) systems.</p>

<p>Every database, message queue or any other distributed system can be named as AP or CP system and sometimes they might even provide an ability to choose exactly what customer wants (for example Riak, you can have AP or CP system; it depends on some parameters you define).</p>

<p>Traditionally, when you build a system or learn something new you think about AP and CP systems equally. But thanks to this session, now I know a different point of view: consistency is something that is really hard to “fix” and availability is not. Load balancers, health checks and self-recovery, monitoring and alerts &ndash; all these tools and techniques are available to everybody.</p>

<p>So maybe we all should just build CP systems and invest to self-recovery / health checks? Sounds like a good plan to me, except the cases when you need to have really low latency (which is rare).</p>

<p>Btw, if you want to read more about practical application of CAP theorem I personally recommend awesome <a href="https://aphyr.com/tags/jepsen">Call me maybe</a> series.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Ansible and resolving hostnames]]></title>
    <link href="http://sap1ens.com/blog/2015/02/09/ansible-and-resolving-hostnames/"/>
    
    <updated>2015-02-09T20:13:50-08:00</updated>
    <id>http://sap1ens.com/blog/2015/02/09/ansible-and-resolving-hostnames</id>
    
    <content type="html"><![CDATA[<p>Recently I’ve worked on a very simple Ansible task. My goal was to start an environment, wait until it becomes available (online) and do some things after. With environment I mean a web service &ndash; imagine any language or framework you want. Let’s say you need to access some specific URL like /api/heartbeat to make sure it’s initialized properly.</p>

<p>Piece of cake, right?</p>

<!-- more -->


<h2>Attempt #1</h2>

<p>If you take a look at the list of all Ansible modules <a href="http://docs.ansible.com/list_of_all_modules.html">here</a>, first of all you probably notice <strong>wait_for</strong>. Let’s try to use it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">--- </span>
</span><span class='line'><span class="l-Scalar-Plain"> - hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'><span class="l-Scalar-Plain">   tasks</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="l-Scalar-Plain">     - wait_for</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">host=http://domain.com/api/heartbeat port=80 timeout=5</span>
</span></code></pre></td></tr></table></div></figure>


<p>(I’m using small timeout here just for demo purposes.)</p>

<p>Result: <em>msg: Timeout when waiting for …</em></p>

<p>So, <strong>wait_for</strong> doesn’t actually work in our case &ndash; it accepts only hostnames without additional path. Ok, skip it.</p>

<p>How about <strong>uri</strong> module? Looks promising:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">--- </span>
</span><span class='line'><span class="l-Scalar-Plain"> - hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'><span class="l-Scalar-Plain">   tasks</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="l-Scalar-Plain">     - uri</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">url=http://domain.com/api/heartbeat timeout=5</span>
</span></code></pre></td></tr></table></div></figure>


<p>It should work, but I have a very specific use case &ndash; every environment I start can also create a new CNAME address. It requires some time to become resolvable. So, unfortunately result is <em>msg: Unable to resolve the host name given.</em></p>

<p>I’ve realized that I couldn’t do it with Ansible tools.</p>

<h2>Attempt #2</h2>

<p>If Ansible is powerless let’s just use old school bash. How about that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">--- </span>
</span><span class='line'><span class="l-Scalar-Plain"> - hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'><span class="l-Scalar-Plain">   tasks</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="l-Scalar-Plain">     - shell</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">curl --silent --show-error --output /dev/null --retry 90 --retry-delay 10 --retry-max-time 900 http://domain.com/api/heartbeat</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks like it works! Except it doesn’t :&ndash;/</p>

<p>If you run this playbook you see that it actually waits for the URL to be available. But there is a problem in the interval between environment becoming resolvable and environment returning HTTP reply. Curl fails in that specific moment.</p>

<p>Wget is better in this case, it has <em>retry-connrefused</em> flag that really helps with the issue. Unfortunately it fails with the part of resolving hostname.</p>

<h2>Attempt #3</h2>

<p>I’ve decided to continue with Curl approach, but improve it as much as I can. So, finally:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">--- </span>
</span><span class='line'><span class="l-Scalar-Plain"> - hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'><span class="l-Scalar-Plain">   tasks</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="l-Scalar-Plain">     - script</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">scripts/wait_for.sh http://domain.com/api/heartbeat</span>
</span></code></pre></td></tr></table></div></figure>


<p>where wait_for.sh:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh </span>
</span><span class='line'> until curl --silent --output /dev/null <span class="nv">$1</span>; <span class="k">do</span>
</span><span class='line'>   <span class="nb">echo </span>Could not fetch, retrying...
</span><span class='line'>   sleep 30
</span><span class='line'> done
</span></code></pre></td></tr></table></div></figure>


<p>Looks really optimistic (and simple!), but you can always cancel it.</p>

<h2>Conclusion</h2>

<p>I really like the Ansible way, because you can always switch to old school bash and implement whatever you want. I’ve almost decided that this task is impossible to do with Ansible but finally did it in a different way. Don’t be afraid and experiment!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[State &#8733; 1 / Scale]]></title>
    <link href="http://sap1ens.com/blog/2014/12/06/state-1-slash-scale/"/>
    
    <updated>2014-12-06T15:53:48-08:00</updated>
    <id>http://sap1ens.com/blog/2014/12/06/state-1-slash-scale</id>
    
    <content type="html"><![CDATA[<p>From <a href="http://www.jamesward.com/2014/12/03/java-doesnt-suck-youre-just-using-it-wrong">Java Doesn’t Suck – You’re Just Using it Wrong</a>:</p>

<blockquote><p>Sticky sessions and server state are usually one of the best ways to kill your performance and resilience. Session state (in the traditional Servlet sense) makes it really hard to do Continuous Delivery and scale horizontally. If you want a session cache use a real cache system – something that was designed to deal with multi-node use and failure. e.g. Memcache, ehcache, etc. In-memory caches are fast but hard to invalidate in multi-node environments and are not durable across restarts – they have their place, like calculated / derived properties where invalidation and recalculation are easy.</p>

<p>Web apps should move state to the edges. UI-related state should live on the client (e.g. cookies, local storage, and in-memory) and in external data stores (e.g. SQL/NoSQL databases, Memcache stores, and distributed cache clusters). Keep those REST services 100% stateless or else the state monster will literally eat you in your sleep.</p></blockquote>

<p>It&rsquo;s easy to follow the rule, but if you didn&rsquo;t&hellip; :&ndash;/</p>

<p>Server state is very hard to fix, it requires massive refactoring and additional tools sometimes. Personally, I&rsquo;ve realized that it&rsquo;ll be my rule #1: avoid state as much as you can.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[What is really DevOps?]]></title>
    <link href="http://sap1ens.com/blog/2014/10/26/what-is-really-devops/"/>
    
    <updated>2014-10-26T11:51:11-07:00</updated>
    <id>http://sap1ens.com/blog/2014/10/26/what-is-really-devops</id>
    
    <content type="html"><![CDATA[<p>DevOps, from <a href="http://en.wikipedia.org/wiki/DevOps">wikipedia</a>:</p>

<blockquote><p>DevOps (a portmanteau of &ldquo;development&rdquo; and &ldquo;operations&rdquo;) is a concept dealing with, among other things: software development, operations, and services. It emphasizes communication, collaboration, and integration between software developers and information technology (IT) operations personnel. DevOps is a response to the interdependence of software development and IT operations. It aims to help an organization rapidly produce software products and services.</p></blockquote>

<p>I think everybody in IT world knows about DevOps concept. Or at least heard about it. Somebody might hire DevOps Engineers.</p>

<p>But if you ask yourself &ndash; what does DevOps mean precisely? What should DevOps Engineer do during the work day? &ndash; the answer probably is clear to you only if you’re DevOps Engineer (it should be!) or if you work very closely with them. For the other world it’s some kind of leprechaun that magically solves all the problems for the team (or application). Well, that’s usually true (not the leprechaun part), but it seems to me there are no any good common standards or rules for this job.</p>

<p>I’d like to share my thoughts about what day-to-day activities should have every DevOps Engineer. I wrote them in a form that every developer should understand, especially if you’re interested in doing more DevOps stuff in your team.</p>

<!-- more -->


<h2>Two Simple Rules</h2>

<p>So, let’s start from the two very simple rules that every DevOps  person should adopt:</p>

<ul>
<li>Everything should be automated</li>
<li>Everything should be automated in a way that other member of the team can use it</li>
</ul>


<p>That’s it. You can apply it to anything &ndash; running tests, accessing logs, using monitoring, doing releases, … The whole point of having a DevOps Engineer is to glue your Product/Dev/Operations/QA teams together, eliminate any unnecessary communication and manual work. As a result you should see increased speed of development and decreased number of bugs (at least human errors).</p>

<p>Ok, that was very high level things. Let’s go deeper.</p>

<h2>DevOps Activities</h2>

<h3>Development tools support</h3>

<p>It’s important to increase development speed as much as you can &ndash; it affects budget, happiness and even business metrics. But sometimes you have to work with really complicated applications, especially if you use service-oriented architecture.</p>

<p>Having the same setup for all developers can be challenging. Luckily tools like <a href="https://www.vagrantup.com">Vagrant</a> can reduce the struggle. For example, <a href="https://www.vagrantup.com">Vagrant</a> + <a href="https://www.docker.com">Docker</a> is a really powerful combination to reproduce any complicated stack.</p>

<p>Also, make sure you use VCS for everything ;&ndash;)</p>

<h3>Continuous Integration (CI)</h3>

<p><a href="http://jenkins-ci.org">Jenkins</a>, <a href="https://www.jetbrains.com/teamcity/">TeamCity</a>, <a href="https://www.atlassian.com/software/bamboo">Bamboo</a>, <a href="https://circleci.com">CircleCI</a>, <a href="https://travis-ci.org">Travis</a>… &ndash; all these tools have very simple, but very powerful idea: run your builds or tests automatically, triggered by events (usually commits in VCS system) or time. It allows you, as a developer, sleep well, because all your changes are tested almost in realtime.</p>

<p>As a DevOps Engineer it’s important to make sure developers can see results and debug any issues, but at the same time they shouldn’t deal with CI system too much &ndash; use email/chat notifications. They will like it.</p>

<h3>Configuration management</h3>

<p>When a codebase is tested it’s time to deploy it. At least to a staging server. We’ll talk about deployments in the next section, but here let’s talk about environments. Usually every team has a local environment for local development, dev or staging  environment for running tests / showing demos and, of course, production environment.</p>

<p>So, imagine you decided to update a version for some library. Or programming language. It means you have to go and update it for every environment! And in case of local environment you should do it for every team member! That’s a nightmare!</p>

<p>Fortunately we have really nice tools for configuration management. Check Tools section below.</p>

<h3>Deployment / Continuous Delivery</h3>

<p>Ok, codebase is ready, we also have a few environments that were configured automatically. It’s time to deploy our application!</p>

<p>Actually, sometimes you might think that it’s a trivial task. You can just write a small bash-script that takes the latest version from your VCS and restarts a service or something.</p>

<p>But it can be really complicated as well. Load balancers for rolling updates, feature flags, blue green deployments, RDBMS replicas and shards…</p>

<p>And again, even very complicated deployment can be automated. Check Tools section for more details.</p>

<p>Btw, you can combine CI and deployments! It’s called Continuous Delivery (or Continuous Deployment) and the idea behind is obvious: deploy your change right away if all tests are succeeded. That’s a huge win, you can deploy very often and you can get a feedback very fast.</p>

<h3>Security</h3>

<p>When you prepare your application for production release it’s very important to understand who can access what. Things like ssh keys, VPNs, IP whitelisting should make you life easier.</p>

<h3>Monitoring</h3>

<p>So, application is running and it gets some traffic. Nice!</p>

<p>But production environment is always different. And someday you’ll see that one part of your app works really slow. Or just behave strange. Or traffic is too high. And you can’t reproduce it locally :(</p>

<p>That’s why you should use monitoring. And when I say monitoring I don’t mean have <a href="http://newrelic.com">NewRelic</a> integration (which is great, actually) and relax. <a href="http://codeascraft.com/2011/02/15/measure-anything-measure-everything/">Measure Anything, Measure Everything</a> &ndash; that’s very good idea, especially for your future. You business folks will say thank you, you’ll see.</p>

<h3>Maintenance</h3>

<p>Monitoring itself usually is not enough. First of all, when something is not working you should know it first. Notifications and alerts that wake you up at 3am on Sunday are <strong>really</strong> helpful.</p>

<p>All kinds of logs help you investigate issues and if you can afford <a href="http://www.splunk.com">Splunk</a> &ndash; just buy it.</p>

<p>You can design some systems to have self-healing procedures. That’s not easy, but can reduce a lot of pain.</p>

<h3>Backup &amp; Restore</h3>

<p>You probably do some backups, don&rsquo;t you? But have you ever tried to actually use them?</p>

<p>Backups can give you false confidence, you should only rely on restore procedure. Make sure you have backups for database, file storage, etc. and they can be quickly used. Otherwise you&rsquo;re in trouble.</p>

<p>Hint: restore = [configuration management + ] deployment + backup data.</p>

<h2>Tools</h2>

<p><a href="https://www.getchef.com/chef/">Chef</a>, <a href="http://puppetlabs.com">Puppet</a>, <a href="http://www.ansible.com">Ansible</a>, <a href="http://www.saltstack.com">SaltStack</a> &ndash; these are main DevOps tools and every DevOps person should be familiar with at least one of them. They all have important features like configuration management, multi-node deployments, task execution, etc.</p>

<p>Usually if you want to create a bash-script and put it on a remote machine one of those tools is a better solution.</p>

<p>Let me show you <a href="https://github.com/ansible/ansible-examples/blob/master/tomcat-standalone/roles/tomcat/tasks/main.yml">an example</a> of using Ansible for Tomcat installation and configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Install Java 1.7</span>
</span><span class='line'>  <span class="l-Scalar-Plain">yum</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">name=java-1.7.0-openjdk state=present</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">add group &quot;tomcat&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">group</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">name=tomcat</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">add user &quot;tomcat&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">name=tomcat group=tomcat home=/usr/share/tomcat</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sudo</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">True</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">delete home dir for symlink of tomcat</span>
</span><span class='line'>  <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rm -fr /usr/share/tomcat</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sudo</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">True</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Download Tomcat</span>
</span><span class='line'>  <span class="l-Scalar-Plain">get_url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">url=http://www.us.apache.org/dist/tomcat/tomcat-7/v7.0.55/bin/apache-tomcat-7.0.55.tar.gz dest=/opt/apache-tomcat-7.0.55.tar.gz</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Extract archive</span>
</span><span class='line'>  <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">chdir=/usr/share /bin/tar xvf /opt/apache-tomcat-7.0.55.tar.gz -C /opt/ creates=/opt/apache-tomcat-7.0.55</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Symlink install directory</span>
</span><span class='line'>  <span class="l-Scalar-Plain">file</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">src=/opt/apache-tomcat-7.0.55 path=/usr/share/tomcat state=link</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Change ownership of Tomcat installation</span>
</span><span class='line'>  <span class="l-Scalar-Plain">file</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">path=/usr/share/tomcat/ owner=tomcat group=tomcat state=directory recurse=yes</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Configure Tomcat server</span>
</span><span class='line'>  <span class="l-Scalar-Plain">template</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">src=server.xml dest=/usr/share/tomcat/conf/</span>
</span><span class='line'>  <span class="l-Scalar-Plain">notify</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">restart tomcat</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Configure Tomcat users</span>
</span><span class='line'>  <span class="l-Scalar-Plain">template</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">src=tomcat-users.xml dest=/usr/share/tomcat/conf/</span>
</span><span class='line'>  <span class="l-Scalar-Plain">notify</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">restart tomcat</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Install Tomcat init script</span>
</span><span class='line'>  <span class="l-Scalar-Plain">copy</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">src=tomcat-initscript.sh dest=/etc/init.d/tomcat mode=0755</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Start Tomcat</span>
</span><span class='line'>  <span class="l-Scalar-Plain">service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">name=tomcat state=started enabled=yes</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">deploy iptables rules</span>
</span><span class='line'>  <span class="l-Scalar-Plain">template</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">src=iptables-save dest=/etc/sysconfig/iptables</span>
</span><span class='line'>  <span class="l-Scalar-Plain">notify</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">restart iptables</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">wait for tomcat to start</span>
</span><span class='line'>  <span class="l-Scalar-Plain">wait_for</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">port={{http_port}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, it’s very easy to read. Don’t be afraid. Just pick one of those tools and act (pick <a href="http://www.ansible.com">Ansible</a>).</p>

<h2>Summary</h2>

<p>Constantly apply Two Simple Rules and you’ll see how much time you spend on actual development instead of struggling with configuration, environments or deployments. You can’t automate development process (yet), but you should automate everything else.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[How and what I read [as a Software Engineer]]]></title>
    <link href="http://sap1ens.com/blog/2014/10/13/how-and-what-i-read-as-a-software-engineer/"/>
    
    <updated>2014-10-13T15:06:09-07:00</updated>
    <id>http://sap1ens.com/blog/2014/10/13/how-and-what-i-read-as-a-software-engineer</id>
    
    <content type="html"><![CDATA[<p>I think that self-education is the most important aspect of a good Software Engineer. You <em>have to</em> learn a lot, because our field is still very changeable: popular technology that you know right now might be forgotten very soon, in 2-3 years. And even if you spend significant amount of time during you work day it&rsquo;s not enough :) Always not enough. I&rsquo;m not saying that you should learn <em>everything</em>, but mastering even 2-3 skills that you have and care for is very challenging.</p>

<p>And with self-education I don&rsquo;t necessary mean visiting some expensive courses or getting additional certificate. Not at all. For me, reading books, articles and tutorials is always more efficient &ndash; you can choose very granular pieces of wisdom that can help you fill the gaps in your knowledge.</p>

<!-- more -->


<p>Thankfully, there are a lot of ways to increase your reading list: social networks, blogs, email subscriptions, feed aggregators&hellip; Even old-school books can be accessed online with different devices. I want to share what I use to manage all these things.</p>

<p>And before I start I just want to mention that I usually use iPad Air for reading and I think it&rsquo;s a best device for that ;)</p>

<h2>Books and everything else</h2>

<p>I think it&rsquo;s good to separate books (and long research papers, tutorials, etc.) from relatively short articles and blog posts. In this case you can read one book at the time (for example spend 30 minutes during the evening every day) and also consume articles on the fly (when you&rsquo;re going to work, having lunch, taking a break, etc).</p>

<p>I use <a href="https://www.omnigroup.com/omnifocus">OmniFocus</a> for all kinds of ToDo lists. And I have a separate list for books to read. Usually I read them with <a href="https://itunes.apple.com/ca/app/ibooks/id364709193">iBooks</a> or <a href="https://itunes.apple.com/ca/app/kindle/id302584613">Kindle for iPad</a>.</p>

<p>Let&rsquo;s see how to deal with smaller things.</p>

<h3>RSS</h3>

<p><a href="http://www.newsblur.com">NewsBlur</a> is my Google Reader replacement. Right now I have 48 subscriptions, mostly technical blogs like <a href="http://highscalability.com">highscalability.com</a>, <a href="http://letitcrash.com">letitcrash.com</a> or  <a href="http://martinfowler.com">martinfowler.com</a>.</p>

<h3>Pocket</h3>

<p><a href="https://getpocket.com">Pocket</a> is my main reading list. Before I&rsquo;ve tried <a href="https://www.readability.com">Readability</a>, which is free, but Pocket has much better iOS app. And also it can save videos!</p>

<h2>Things in action</h2>

<p>So, I have different streams of incoming information &ndash; Twitter, NewsBlur, reddit and reddit-like websites, conversations with colleagues, meetups, etc. Something I read right away, but most of the articles go to the Pocket app. It&rsquo;s important to give every article a few tags, so you can easily filter and choose what you want to read later. And with books I spent a few minutes to check reviews and content before adding them to the reading list.</p>

<p>I don&rsquo;t use recommendation-based apps like Flipboard or Prismatic, because my reading lists are never empty :) And also, I&rsquo;ll know about all really important and popular articles anyway, for example from Twitter.</p>

<h2>Choice</h2>

<p>It&rsquo;s so easy to sink into this flow of articles, blog posts, updates&hellip; I&rsquo;m trying to plan what I&rsquo;m going to learn and save things accordingly. For example, I have plans to learn more Haskell, so if I see really good article about some Haskell concept or library, I save it. But if it&rsquo;s Go, Rust or how Lift framework works &ndash; I don&rsquo;t have interest now (and in the near future), so I just skip them. You should be realistic and honest to yourself.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Software Development at Bench Accounting]]></title>
    <link href="http://sap1ens.com/blog/2014/09/02/software-development-at-bench-accounting/"/>
    
    <updated>2014-09-02T10:37:50-07:00</updated>
    <id>http://sap1ens.com/blog/2014/09/02/software-development-at-bench-accounting</id>
    
    <content type="html"><![CDATA[<p>I&rsquo;m glad to present the new page about Software Development at Bench Accounting: <a href="https://developers.bench.co/">https://developers.bench.co</a>.</p>

<p><img src="https://www.evernote.com/shard/s24/sh/79a8363d-6f39-4097-8307-51d4274b8a71/0a5fc38a6cae9329e29d0a2b0d1558ba/deep/0/Bench---Developers.png" alt="" /></p>

<p>We open-sourced a few small projects and we&rsquo;re going to do more: <a href="https://github.com/BenchLabs">https://github.com/BenchLabs</a>.</p>

<p>Our blog is in progress right now and it should be finished in the end of September. More cool articles there!</p>

<p>PS: We&rsquo;re hiring! Check our <a href="https://bench.recruiterbox.com/jobs/fk0oj4">DevOps Engineer</a> position. Also, we&rsquo;ll start looking for the Front-end Engineer and Mobile/iOS Engineer very soon, stay tuned!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Microservice with Akka, Spray and Camel]]></title>
    <link href="http://sap1ens.com/blog/2014/07/13/microservice-with-akka-spray-and-camel/"/>
    
    <updated>2014-07-13T15:44:37-07:00</updated>
    <id>http://sap1ens.com/blog/2014/07/13/microservice-with-akka-spray-and-camel</id>
    
    <content type="html"><![CDATA[<p><a href="http://wayfinder.co/pathways/53536427f7040a11002ae407/a-field-guide-to-microservices-april-2014-edition">Microservices architecture</a> is a popular trend right now. I don&rsquo;t want to repeat anything about microservices in general, but instead I want to introduce an example project of a microservice based on Akka, Spray and Camel.</p>

<p><strong><a href="https://github.com/sap1ens/akka-microservice">akka-microservice</a></strong> is based on one of the Typesafe Activator templates, but it&rsquo;s very (really) simple and very easy to learn &ndash; just go and checkout the codebase. It doesn&rsquo;t contain any front-end parts, just pure Scala.</p>

<p>Application has a lot of handy stuff:</p>

<ul>
<li>Easy to test Akka system with a sample actor</li>
<li>Spray-based RESTful API with full <a href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing">CORS</a> support</li>
<li>Actor and API sample tests</li>
<li>Camel/ActiveMQ extension for a handy integration with Akka system</li>
<li>Typesafe config with different profiles for production and testing environments</li>
<li>Logback-SLF4J logging</li>
<li>Sbt assembly plugin for JAR-file creation with custom merge strategy</li>
</ul>


<p>So it&rsquo;s focused more on production usage, you can just take the project, rename a few files &amp; packages and it&rsquo;s ready to be deployed! Just write your actors and routes. Happy hAkking! :)</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Selenium Webdriver as a deadly weapon]]></title>
    <link href="http://sap1ens.com/blog/2014/05/27/selenium-webdriver-as-a-deadly-weapon/"/>
    
    <updated>2014-05-27T21:19:20-07:00</updated>
    <id>http://sap1ens.com/blog/2014/05/27/selenium-webdriver-as-a-deadly-weapon</id>
    
    <content type="html"><![CDATA[<h2>Weapon</h2>

<p>During my career I see the battle between website/web app owners and bots/scrapers/crawlers writers. I thought this battle can&rsquo;t be won. But about 6 months ago I joined it and I think now I have [almost] deadly weapon.</p>

<p><a href="http://docs.seleniumhq.org/projects/webdriver/">Selenium Webdriver</a> is my choice.</p>

<!-- more -->


<p>Probably, you heard or used it before. It&rsquo;s the most popular tool for the functional tests (also known as end-to-end tests), and projects like <a href="https://saucelabs.com">saucelabs.com</a> can make these tests very easy to implement and run.</p>

<p>But Selenium Webdriver is not only a testing tool &ndash; it&rsquo;s browser automation tool. Modern implementation with Google Chrome (actually Chromium) driver is very powerful &ndash; it communicates with Google Chrome via special protocol which is a native thing for this browser. You have access to everything &ndash; JavaScript, DOM, even secure cookies! That&rsquo;s why it&rsquo;s almost impossible to detect scraper written with Selenium Webdriver and Google Chrome &ndash; you just tell browser what to do and it works like there is a real person who is sitting in front of the browser and clicking buttons.</p>

<h2>Preparations for the battle</h2>

<h3>Xvfb</h3>

<p>So, you wrote a sequence of steps for scraping some website. Awesome! But what step should be next? Of course you can just run it manually on your computer, but what if you need to create some sort of service or even platform based on it? Yes, it&rsquo;s possible!</p>

<p><a href="http://www.x.org/archive/X11R7.7/doc/man/man1/Xvfb.1.xhtml">Xvfb</a> is a virtual display server implementing the X11 protocol. Selenium Webdriver needs a display to work and it works nicely with Xvfb. Set of steps you need to do if you want to run all this stuff on your server:</p>

<ul>
<li>install Google Chrome application</li>
<li>install Xvfb</li>
<li><a href="https://sites.google.com/a/chromium.org/chromedriver/downloads">download</a> Google Chrome driver, add a path to this file to the &ldquo;webdriver.chrome.driver&rdquo; system property</li>
<li>create Xvfb initialization script, <a href="https://gist.github.com/jterrace/2911875">example for Ubuntu</a></li>
<li>run Xvfb</li>
<li>set DISPLAY variable like &ldquo;export DISPLAY=:99&rdquo;, where 99 is a number of your virtual display, I believe it can be a random number</li>
<li>now you can run your application! Everything should just work, including screenshots (useful for debugging).</li>
</ul>


<h3>File download</h3>

<p>There is one problem that Selenium Webdriver can&rsquo;t solve. Usually, when you click to a download button you see the OS modal window. Unfortunately, driver can&rsquo;t handle OS windows. But there is a solution for this problem &ndash; create your own file downloader and pass session information to it, like cookies and other headers. Example with Apache HttpClient and Scala:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">FileDownloader</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">defaultUserAgent</span> <span class="k">=</span> <span class="s">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.131 Safari/537.36&quot;</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">timeout</span> <span class="k">=</span> <span class="mi">10</span> <span class="c1">// seconds</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="n">download</span><span class="o">(</span><span class="n">url</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">pathToSave</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">cookies</span><span class="k">:</span> <span class="kt">Set</span><span class="o">[</span><span class="kt">Cookie</span><span class="o">],</span> <span class="n">userAgent</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Future</span> <span class="o">{</span> <span class="n">blocking</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">fileUrl</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">URL</span><span class="o">(</span><span class="n">url</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="n">downloadedFile</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="n">pathToSave</span><span class="o">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">downloadedFile</span><span class="o">.</span><span class="n">canWrite</span><span class="o">)</span> <span class="n">downloadedFile</span><span class="o">.</span><span class="n">setWritable</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="n">config</span> <span class="k">=</span> <span class="nc">RequestConfig</span><span class="o">.</span><span class="n">custom</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="n">setConnectTimeout</span><span class="o">(</span><span class="n">timeout</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="n">setConnectionRequestTimeout</span><span class="o">(</span><span class="n">timeout</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="n">setSocketTimeout</span><span class="o">(</span><span class="n">timeout</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="n">setCookieSpec</span><span class="o">(</span><span class="nc">CookieSpecs</span><span class="o">.</span><span class="nc">BROWSER_COMPATIBILITY</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="n">build</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="n">client</span> <span class="k">=</span> <span class="nc">HttpClientBuilder</span><span class="o">.</span><span class="n">create</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="n">setDefaultRequestConfig</span><span class="o">(</span><span class="n">config</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="n">setRedirectStrategy</span><span class="o">(</span><span class="k">new</span> <span class="nc">LaxRedirectStrategy</span><span class="o">())</span>
</span><span class='line'>            <span class="o">.</span><span class="n">setUserAgent</span><span class="o">(</span><span class="n">userAgent</span> <span class="n">getOrElse</span> <span class="n">defaultUserAgent</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="n">build</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="n">localContext</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">BasicHttpContext</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">localContext</span><span class="o">.</span><span class="n">setAttribute</span><span class="o">(</span><span class="nc">HttpClientContext</span><span class="o">.</span><span class="nc">COOKIE_STORE</span><span class="o">,</span> <span class="n">mimicCookieState</span><span class="o">(</span><span class="n">cookies</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="n">request</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">HttpGet</span><span class="o">(</span><span class="n">fileUrl</span><span class="o">.</span><span class="n">toURI</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="n">response</span> <span class="k">=</span> <span class="n">client</span><span class="o">.</span><span class="n">execute</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">localContext</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;HTTP GET request status: ${response.getStatusLine.getStatusCode}, Downloading file: ${downloadedFile.getName}&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="nc">FileUtils</span><span class="o">.</span><span class="n">copyInputStreamToFile</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="n">getEntity</span><span class="o">.</span><span class="n">getContent</span><span class="o">,</span> <span class="n">downloadedFile</span><span class="o">)</span>
</span><span class='line'>        <span class="n">response</span><span class="o">.</span><span class="n">getEntity</span><span class="o">.</span><span class="n">getContent</span><span class="o">.</span><span class="n">close</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">downloadedFile</span><span class="o">.</span><span class="n">getCanonicalPath</span>
</span><span class='line'>    <span class="o">}}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">def</span> <span class="n">mimicCookieState</span><span class="o">(</span><span class="n">seleniumCookieSet</span><span class="k">:</span> <span class="kt">Set</span><span class="o">[</span><span class="kt">Cookie</span><span class="o">])</span><span class="k">:</span> <span class="kt">BasicCookieStore</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">mimicWebDriverCookieStore</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">BasicCookieStore</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">seleniumCookie</span> <span class="k">&lt;-</span> <span class="n">seleniumCookieSet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="n">duplicateCookie</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">BasicClientCookie</span><span class="o">(</span><span class="n">seleniumCookie</span><span class="o">.</span><span class="n">getName</span><span class="o">,</span> <span class="n">seleniumCookie</span><span class="o">.</span><span class="n">getValue</span><span class="o">)</span>
</span><span class='line'>            <span class="n">duplicateCookie</span><span class="o">.</span><span class="n">setDomain</span><span class="o">(</span><span class="n">seleniumCookie</span><span class="o">.</span><span class="n">getDomain</span><span class="o">)</span>
</span><span class='line'>            <span class="n">duplicateCookie</span><span class="o">.</span><span class="n">setSecure</span><span class="o">(</span><span class="n">seleniumCookie</span><span class="o">.</span><span class="n">isSecure</span><span class="o">)</span>
</span><span class='line'>            <span class="n">duplicateCookie</span><span class="o">.</span><span class="n">setExpiryDate</span><span class="o">(</span><span class="n">seleniumCookie</span><span class="o">.</span><span class="n">getExpiry</span><span class="o">)</span>
</span><span class='line'>            <span class="n">duplicateCookie</span><span class="o">.</span><span class="n">setPath</span><span class="o">(</span><span class="n">seleniumCookie</span><span class="o">.</span><span class="n">getPath</span><span class="o">)</span>
</span><span class='line'>            <span class="n">mimicWebDriverCookieStore</span><span class="o">.</span><span class="n">addCookie</span><span class="o">(</span><span class="n">duplicateCookie</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mimicWebDriverCookieStore</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It takes URL to download, path where it should save the file, set of cookies and optional user agent header. Of course you can pass and add more headers if you need.</p>

<p>And it&rsquo;s very easy to get current cookies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">driver</span><span class="o">.</span><span class="n">manage</span><span class="o">().</span><span class="n">getCookies</span><span class="o">.</span><span class="n">toSet</span>
</span></code></pre></td></tr></table></div></figure>


<p>and user agent:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">driver</span><span class="o">.</span><span class="n">executeScript</span><span class="o">(</span><span class="s">&quot;return navigator.userAgent&quot;</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">userAgent</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=&gt;</span> <span class="nc">Some</span><span class="o">(</span><span class="n">userAgent</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">None</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Defence</h2>

<p>Before I said that it&rsquo;s almost impossible to detect Selenium Webdriver and Google Chrome when they used together. Actually, I see a few ways to protect yourself:</p>

<ul>
<li>CAPTCHA. But there are a lot of tools that can help with recognition, so it can&rsquo;t be really serious protection.</li>
<li>Create your website/web app with Flash. It&rsquo;s ugly, nobody uses it except for promo sites, but it should work. I&rsquo;m sure it&rsquo;s possible to find a way to interact with Flash as well (with JavaScript calls or using other tools), but it won&rsquo;t be a native browser way to do it &ndash; so, probably, you can detect it.</li>
<li>Heuristic methods. For example, Google AdWords/AdSense system is able to detect bots by tracking mouse moves, scrolls, timings, etc. I believe it&rsquo;s very complicated and very expensive technology, but it exists.</li>
</ul>


<h2>Summary</h2>

<p>As you can see, Selenium Webdriver is a very powerful tool, not only for testing, but for browser automation in general. If you need an integration with web app that doesn&rsquo;t have a public API, Selenium Webdriver can be a way to go. But with great power comes great responsibility&hellip;</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Software Engineer Interview]]></title>
    <link href="http://sap1ens.com/blog/2014/02/11/software-engineer-interview/"/>
    
    <updated>2014-02-11T20:43:21-08:00</updated>
    <id>http://sap1ens.com/blog/2014/02/11/software-engineer-interview</id>
    
    <content type="html"><![CDATA[<p>Hiring is always hard. You have a vacancy, then a lot of candidates came and you have to decide who will be the one.</p>

<p>I think I&rsquo;ve finally understood what is the perfect interview for the software engineer position.</p>

<!-- more -->


<h3>Test application</h3>

<p>First of all, you should prepare a task to write some test application. It should be simple and small (maximum 60 minutes to implement).</p>

<p>Then add about 5 additional problems to work with (every problem can take about 10-60 minutes).</p>

<h3>Interview process</h3>

<p>Use Google Hangout or Skype to connect with candidate. After introduction ask to share his screen (it&rsquo;s important).</p>

<p>Then describe the task. Candidate can use any language/framework, he can also use Google, Stackoverflow, any books, tutorials, etc.</p>

<p>And magic happens here. Long resumes, great portfolios, recommendations, certifications &ndash; all these things are useless. Now you can see how people <em>really</em> <strong>work</strong>.</p>

<p>After main task you should offer a few problems to work with. It&rsquo;s nice if you have either hard and easy problems &ndash; you can get additional information in this case. There are different types of software engineers, somebody likes to work on a really huge and complicated problem (think a lot about design, refactoring, etc.), and other people may like finishing tasks, fixing bugs&hellip; Sometimes you know what type you need.</p>

<h3>Result</h3>

<p>In the end of the interview you know a lot:</p>

<ul>
<li>You saw how candidate thought about the problem, how he analysed you requirements</li>
<li>You saw how candidate designed the application, probably on macro- (project, module) and micro-levels (class, function)</li>
<li>You saw how candidate used his IDE, OS, tools</li>
<li>You know is candidate able to learn quickly, use Google/Stackoverflow successfully (important skill btw)</li>
<li>You also saw his programming skills. If you&rsquo;re generalist it doesn&rsquo;t matter what language was used.</li>
<li>You can probably decide will it be comfortable to work with this person</li>
</ul>


<p>Cool for the 90 minutes, right?</p>

<p>PS: You might say &ndash; &ldquo;I don&rsquo;t like when somebody is watching when I work. I feel terrible.&rdquo;.</p>

<p>I think it depends on experience &ndash; the more experience you have, the more comfortable you feel. Also, may be you didn&rsquo;t work in a team enough.</p>
]]></content>
    
  </entry>
  
</feed>